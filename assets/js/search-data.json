{
  
    
  
    
  
    
        "post2": {
            "title": "Effectiveness of Covid-19 management and preventative measures in Ontario, Canada.",
            "content": "Project motivation and background . Covid-19 is an infectious respiratory diseases caused by the newly discovered Coronavirus. The novel virus, also known as SARS-CoV-2 (severe acute respiratory syndrome coronavirus 2, formerly called 2019-nCoV), is a family of viruses popularized by their spiky crown. The virus was first detected amid an outbreak of respiratory illness cases in Wuhan City, China and was initially reported by World Health Organization on the 31st of December 2019. . In this work, exploratory analysis is carried out to assess the impact of Ontario&#39;s Covid preventative solutions and restrictive measures (mobility), on the daily changes in covid cases. . In particular, this project will explore the following lines of inquiry with the help of a number of publicly accessible data sets: . Is there an observable relationship between the reported covid activities and the proposed medical solution i.e. vaccination? . | Is there an influence on the number of reported cases in ontario by people&#39;s activities across the days of the week? . | With the government&#39;s vaccination plan, preference was given to adults who were 70 and over first, as well as those considered medically compromised. Was this as a result of the significance in the number of confirmed positive cases in the age group 70 and above? . | How does the proportion of affected groups compare with the those getting vaccinated? . | How has the pandemic impacted the community&#39;s mobility? Is there an observable effect on the number of cases in the province? . | Data collection . The following datasets were identified to fulfill the analysis requirement: . Ontario&#39;s Covid-19 Pandemic and Vaccination trends from 25-January-2020 to 17-July-2021 . Data Source | . | Confirmed Positive Cases in cities within Ontario (with age) . Data Source | Data Dictionary | . | Ontario Vaccination data (by age) . Data Source | Data Dictionary | . | Google Covid-19 mobility report . Data Source | Data Dictionary Note: The baseline in mobility data is the median value, for the corresponding day of the week, during the 5-week period Jan 3–Feb 6, 2020 | . | . Data understanding . Features Explored In Ontario&#39;s Covid-19 Pandemic and Vaccination trends from 25-January-2020 to 17-July-2021: . date - The date of activities captured in the dataset | change_cases - The number of new cases as of each day | change_fatalities - The number of new hospitalizations as of each day | change_tests - The number of new tests as of each day | change_hospitalizations - The number of new hospitalizations as of each day | change_criticals - The number of new critcal cases as of each day | change_recoveries - The number of recovered patients as of each day | change_vaccinations - The number of new single-dosed vaccinated people as of each day | change_vaccinated - The number of fully vaccinated people as of each day | change_vaccines_distributed - The number of vaccines made available to the province as of each day | total_cases - Total number of covid cases | total_fatalities - Total number of covid-related fatalities | total_tests - Total number of covid tests | total_hospitalizations - Total number of covid-related hospitalizations | total_critcals - Total number of covid-related critical care patients | total_recoveries - Total number of recoveries | total_vaccinations - Total number of covid vaccinations (first dose) | total_vaccinated - Total number of fully vaccinated people | total_vaccines_distributed - Total number of vaccines distributed across the province | NOTE: Other Datasets used are accompanied with links to their dictionaries above. . . Importing project dependencies . Required libraries are: . pandas : required to access dataset .csv file and work with data in tabular representation. . | numpy required to round the data in the correlation matrix. . | matplotlib, seaborn, pylab required for data visualization. . | import pandas as pd import numpy as np import matplotlib.pyplot as plt import matplotlib.gridspec as gridspec import seaborn as sns import matplotlib from pylab import * from pylab import rcParams . print(f&quot;numpy version: {np.__version__}&quot;) print(f&quot;pandas version: {pd.__version__}&quot;) . numpy version: 1.20.1 pandas version: 1.2.4 . Data Exploration and Analysis . Existing pandemic strategy: Ontario will likely overcome the pandemic quicker by prioritizing the older/compromised population for vaccinations and tightening restrictions on mobility. . . Does this strategy translate into Ontario&#39;s reality? Let&#39;s begin exploring the data. . Utility function . The following utility functions are used to support exploratory data analysis work. . &#39;&#39;&#39; Search function for finding highest incident value in a column - with date and day &#39;&#39;&#39; def singleCol_highest_search(df, args): last_col = df.columns[-1] print(f&quot;The table below shows the date of the highest number of {args} n n&quot;) return df[df[args]==df[args].max()][[args,last_col]] . . Ontario covid-19 Overview . Graphing the number of covid-19 related activities in Ontario. This gives us a big picture of the ongoing pandemic. . ontariocovid_vaccine_ts_df = pd.read_pickle(&#39;data/ontario-covid/ontario_df.pickle&#39;) . window=30 plt.figure(figsize=(13, 7)) plt.bar(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_cases&#39;]) plt.plot(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_cases&#39;].rolling(window).mean(), color=&#39;orange&#39;, linestyle=&#39;dashed&#39;) plt.title(&#39;Total Cases&#39;, size=25) plt.xlabel(&#39;Days Since 25-Jan-2020&#39;, size=18) plt.ylabel(&#39;# of Cases&#39;, size=18) plt.legend([&#39;Moving Average {} Days&#39;.format(window), &#39;Daily Changes in COVID-19 Cases&#39;], prop={&#39;size&#39;: 16}) plt.xticks(size=15, rotation=45) plt.yticks(size=15) plt.show() . window=30 plt.figure(figsize=(13, 7)) plt.bar(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_tests&#39;]) plt.plot(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_tests&#39;].rolling(window).mean(), color=&#39;orange&#39;, linestyle=&#39;dashed&#39;) plt.title(&#39;Total Tests&#39;, size=25) plt.xlabel(&#39;Days Since 25-Jan-2020&#39;, size=18) plt.ylabel(&#39;# of Tests&#39;, size=18) plt.legend([&#39;Moving Average {} Days&#39;.format(window), &#39;Daily Changes in COVID-19 tests&#39;], prop={&#39;size&#39;: 16}) plt.xticks(size=15, rotation=45) plt.yticks(size=15) plt.show() . window=30 plt.figure(figsize=(13, 7)) plt.bar(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_hospitalizations&#39;]) plt.plot(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_hospitalizations&#39;].rolling(window).mean(), color=&#39;orange&#39;, linestyle=&#39;dashed&#39;) plt.title(&#39;Total Hospitalizations&#39;, size=25) plt.xlabel(&#39;Days Since 25-Jan-2020&#39;, size=18) plt.ylabel(&#39;# of Hospitalizations&#39;, size=18) plt.legend([&#39;Moving Average {} Days&#39;.format(window), &#39;Daily Changes in COVID-19 hospitalizations&#39;], prop={&#39;size&#39;: 16}) plt.xticks(size=15, rotation=45) plt.yticks(size=15) plt.show() . window=30 plt.figure(figsize=(13, 7)) plt.bar(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_recoveries&#39;]) plt.plot(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_recoveries&#39;].rolling(window).mean(), color=&#39;orange&#39;, linestyle=&#39;dashed&#39;) plt.title(&#39;Total Recoveries&#39;, size=25) plt.xlabel(&#39;Days Since 25-Jan-2020&#39;, size=18) plt.ylabel(&#39;# of Recoveries&#39;, size=18) plt.legend([&#39;Moving Average {} Days&#39;.format(window), &#39;Daily Changes in COVID-19 recoveries&#39;], prop={&#39;size&#39;: 16}) plt.xticks(size=15, rotation=45) plt.yticks(size=15) plt.show() . window=30 plt.figure(figsize=(13, 7)) plt.bar(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_fatalities&#39;]) plt.plot(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_fatalities&#39;].rolling(window).mean(), color=&#39;orange&#39;, linestyle=&#39;dashed&#39;) plt.title(&#39;Total Fatalities&#39;, size=25) plt.xlabel(&#39;Days Since 25-Jan-2020&#39;, size=18) plt.ylabel(&#39;# of Fatalities&#39;, size=18) plt.legend([&#39;Moving Average {} Days&#39;.format(window), &#39;Daily Changes in COVID-19 Fatalities&#39;], prop={&#39;size&#39;: 16}) plt.xticks(size=15, rotation=45) plt.yticks(size=15) plt.show() . window=30 plt.figure(figsize=(13, 7)) plt.bar(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_vaccinations&#39;]) plt.plot(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_vaccinations&#39;].rolling(window).mean(), color=&#39;orange&#39;, linestyle=&#39;dashed&#39;) plt.title(&#39;Total Partial Vaccinations&#39;, size=25) plt.xlabel(&#39;Days Since 25-Jan-2020&#39;, size=18) plt.ylabel(&#39;# of Partial Vaccinations&#39;, size=18) plt.legend([&#39;Moving Average {} Days&#39;.format(window), &#39;Daily Changes in COVID-19 Partially Vaccinated People&#39;], prop={&#39;size&#39;: 16}) plt.xticks(size=15, rotation=45) plt.yticks(size=15) plt.show() . window=30 plt.figure(figsize=(13, 7)) plt.bar(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_vaccinated&#39;]) plt.plot(ontariocovid_vaccine_ts_df.index, ontariocovid_vaccine_ts_df[&#39;total_vaccinated&#39;].rolling(window).mean(), color=&#39;orange&#39;, linestyle=&#39;dashed&#39;) plt.title(&#39;Total Full Vaccinations&#39;, size=25) plt.xlabel(&#39;Days Since 25-Jan-2020&#39;, size=18) plt.ylabel(&#39;# of vaccinations&#39;, size=18) plt.legend([&#39;Moving Average {} Days&#39;.format(window), &#39;Daily Changes in COVID-19 Fully Vaccinated People&#39;], prop={&#39;size&#39;: 16}) plt.xticks(size=15, rotation=45) plt.yticks(size=15) plt.show() . Is there an observable relationship between the reported covid cases, other related activities and the proposed medical solution i.e. vaccination? . ontariocovid_vaccine_corr_df = ontariocovid_vaccine_ts_df.corr() ontariocovid_vaccine_corr_df.head(2) . change_cases change_fatalities change_tests change_hospitalizations change_criticals change_recoveries change_vaccinations change_vaccinated change_vaccines_distributed total_cases total_fatalities total_tests total_hospitalizations total_criticals total_recoveries total_vaccinations total_vaccinated total_vaccines_distibuted . change_cases 1.000000 | 0.473826 | 0.707659 | 0.073889 | 0.268761 | 0.922888 | 0.226406 | -0.165964 | 0.048572 | 0.491306 | 0.527978 | 0.573051 | 0.855737 | 0.773312 | 0.448976 | 0.054404 | -0.114839 | 0.065086 | . change_fatalities 0.473826 | 1.000000 | 0.371175 | -0.057767 | 0.007743 | 0.520527 | 0.002527 | -0.083925 | 0.020417 | 0.165894 | 0.178887 | 0.177395 | 0.660023 | 0.453648 | 0.142329 | -0.053500 | -0.101277 | -0.051679 | . # Assessing degree of correlation between variables - visually plt.figure(figsize=(19.8,12)) sns.heatmap(ontariocovid_vaccine_corr_df, cmap=&#39;ocean&#39;, linewidths=2,vmax=1, vmin=0, square=True, annot=True) plt.title(&quot;Assessing the levels of correlation between ontario covid activities&quot;) plt.show() . . # making a pair plot of the variables in the dataset g = sns.PairGrid(ontariocovid_vaccine_corr_df[[&#39;total_cases&#39;, &#39;total_fatalities&#39;, &#39;total_tests&#39;, &#39;total_hospitalizations&#39;, &#39;total_criticals&#39;, &#39;total_recoveries&#39;, &#39;total_vaccinations&#39;, &#39;total_vaccinated&#39;]]) g.map(sns.scatterplot, color =&#39;olive&#39;) plt.show() . . Observation: . Since Change cases shows the number of cases per day, correlation might be skewed as events take on new values daily. . | A streamline review of total cases vs covid activities and preventive solutions is done next . | . plt.figure(figsize=(13,6)) sns.heatmap(ontariocovid_vaccine_corr_df.loc[&#39;total_cases&#39;:,&#39;total_cases&#39;:], annot=True, cmap=&#39;crest&#39;) plt.title(&quot;Total cases vs Daily totals of other activities&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;}) plt.savefig(&#39;ontario-images/fig_1&#39;, format=&#39;png&#39;) plt.show() . Observation . The plot above shows that most of the correlation in the total data are positive. Although the correlation between hospitalizations, criticals and vaccination activities are low and close to none. . | From the plot above, it can be observed that there is a positive correlation between total cases and the total values of other covid-related activities. . | . # let&#39;s create data frame that&#39;ll hold information from when Ontario had over 0 partially vaccinated people vaccine_activities_df= ontariocovid_vaccine_ts_df[ontariocovid_vaccine_ts_df[&#39;change_vaccinations&#39;]&gt;0] vaccine_activities_df.head(3) . change_cases change_fatalities change_tests change_hospitalizations change_criticals change_recoveries change_vaccinations change_vaccinated change_vaccines_distributed total_cases total_fatalities total_tests total_hospitalizations total_criticals total_recoveries total_vaccinations total_vaccinated total_vaccines_distibuted . 2020-12-14 00:00:00-05:00 1940 | 23 | 57091 | 44 | -7 | 1535 | 5 | 0 | 6000 | 142121 | 3972 | 7019734 | 857 | 264 | 121563 | 5 | 0 | 6000 | . 2020-12-15 00:00:00-05:00 2275 | 20 | 39566 | 64 | 5 | 1810 | 426 | 0 | 0 | 144396 | 3992 | 7059300 | 921 | 269 | 123373 | 431 | 0 | 6000 | . 2020-12-16 00:00:00-05:00 2139 | 43 | 49189 | 11 | 8 | 2043 | 544 | 0 | 0 | 146535 | 4035 | 7108489 | 932 | 277 | 125416 | 975 | 0 | 6000 | . # visualizing data using scatter plot plt.figure(figsize=(10,5)) sns.set_style(&quot;whitegrid&quot;) sns.scatterplot(data=vaccine_activities_df, x=&#39;change_cases&#39;,y=&#39;change_vaccinations&#39;,hue=&#39;change_vaccinated&#39;,legend =&#39;auto&#39;, alpha=0.8) plt.title(&#39;Trend of Covid Cases in Ontario Post-Vaccination Activities&#39;, fontdict={&#39;color&#39;:&#39;purple&#39;,&#39;fontsize&#39;:16,&#39;fontweight&#39;:&#39;bold&#39;}) plt.xlabel(&#39;Number of Covid Cases&#39;) plt.ylabel(&#39;Number of vaccinations&#39;) plt.show() . . # Assessing degree of correlation between variables - after vaccination commenced plt.figure(figsize=(19,11.5)) sns.heatmap(vaccine_activities_df.corr(), cmap=&#39;ocean&#39;, linewidths=2, vmax=1, vmin=0, square=True, annot=True) plt.title(&quot;Assessing the levels of correlation between ontario covid activities - Post Vaccination&quot;) plt.show() . . Observation . The charts above shows that there the covid related events and vaccination activities in the province are correlated. . | With a focus on the correlation of total cases to all the other element, in the data pre and post vaccination, it can be observed that there is a positive correlation between total cases and other totals but its correlation with hospitalizations and criticals are the lowest. . | . Is there an influence on the number of reported cases in ontario by people&#39;s activities across the days of the week? . day_vs_cases_df = ontariocovid_vaccine_ts_df.loc[:,&#39;change_cases&#39;:&#39;total_cases&#39;] day_vs_cases_df.head() . change_cases change_fatalities change_tests change_hospitalizations change_criticals change_recoveries change_vaccinations change_vaccinated change_vaccines_distributed total_cases . 2020-01-25 00:00:00-05:00 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 2020-01-26 00:00:00-05:00 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | . 2020-01-27 00:00:00-05:00 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | . 2020-01-28 00:00:00-05:00 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | . 2020-01-29 00:00:00-05:00 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | . day_vs_cases_df[&#39;day_of_week&#39;] = day_vs_cases_df.index.dayofweek day_vs_cases_df[&#39;day_name&#39;] = day_vs_cases_df.index.day_name() . day_vs_cases_df.head(2) # day_vs_cases_df.isna().any() # double-checking for any missing value: none found . change_cases change_fatalities change_tests change_hospitalizations change_criticals change_recoveries change_vaccinations change_vaccinated change_vaccines_distributed total_cases day_of_week day_name . 2020-01-25 00:00:00-05:00 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 5 | Saturday | . 2020-01-26 00:00:00-05:00 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 6 | Sunday | . plt.figure(figsize=(13,6)) sns.set(style=&#39;darkgrid&#39;) plt.figure(figsize=(13,8)) sns.heatmap(day_vs_cases_df.corr(), annot=True, cmap=&#39;crest&#39;) plt.title(&quot;Days of the week vs Daily changes&quot;, fontdict= {&#39;size&#39;:14,&#39;weight&#39;:&#39;bold&#39;}) plt.savefig(&#39;ontario-images/fig_2_first&#39;, format=&#39;png&#39;) plt.show() . &lt;Figure size 936x432 with 0 Axes&gt; . # exploring the relationship between day of week, cummulative daily and total cases sns.set(style=&#39;darkgrid&#39;) sns.set(palette=&#39;gist_earth&#39;) plt.figure(figsize=(25,80)) g =sns.FacetGrid(day_vs_cases_df, col=&#39;day_name&#39;) g.map(sns.histplot, &#39;change_cases&#39;,kde=True, color=&#39;red&#39;) plt.xlabel(&quot;Cummulative Daily_cases&quot;) r = sns.FacetGrid(day_vs_cases_df, col=&#39;day_name&#39;) r.map(sns.histplot, &#39;total_cases&#39;, kde=True, color=&#39;olive&#39;) plt.xlabel(&quot;Cummulative total_cases&quot;) plt.show() . . &lt;Figure size 1800x5760 with 0 Axes&gt; . gridspec.GridSpec(1,2) fig = plt.figure(figsize=(18,5.5)) sns.set_style(&quot;darkgrid&quot;) plt.subplot2grid((1,2),(0,0)) sns.barplot(x=day_vs_cases_df[&#39;day_name&#39;], y =day_vs_cases_df[&#39;change_cases&#39;], palette=&#39;crest&#39;) plt.xticks(rotation = 45) plt.title(&quot;Cummulative daily cases by day of the week&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;}) plt.ylabel(&quot;Cummulative Daily cases&quot;) plt.xlabel(&quot;Day of the week&quot;) plt.subplot2grid((1,2),(0,1)) sns.barplot(x=day_vs_cases_df[&#39;day_name&#39;],y=day_vs_cases_df[&#39;total_cases&#39;], color = &#39;grey&#39;) plt.xticks(rotation = 45) plt.title(&quot;Cummulative total cases by day of the week&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;}) plt.ylabel(&quot;Cummulative total cases&quot;) plt.xlabel(&quot;Day of the week&quot;) plt.savefig(&#39;ontario-images/fig_2&#39;, format=&#39;png&#39;) plt.show() . singleCol_highest_search(day_vs_cases_df, &#39;change_cases&#39;) . The table below shows the date of the highest number of change_cases . change_cases day_name . 2021-04-16 00:00:00-04:00 4812 | Friday | . Observation: . The correlation heatmap shows that there is very low correlation between most covid activities and the days of the week. . | Despite low correlation, from the plots, a trend can be observed in the cummulative daily changes in covid cases, across weekdays. . | Daily covid cases, based on the data, seem to rises on Thursday into the weekend, fluctuates bewteen saturday to sunday and makes a U-shaped movement between Monday and Wednesday. From the data, Friday, April 16, is the day with the highest number of cases. . | . With the government&#39;s vaccination plan, preference was given to adults who were 70 and over first, as well as those considered medically compromised. Was this as a result of the significance in the number of confirmed positive cases in the age group 70 and above? . Sub-question 1: What age group of Ontraio&#39;s population has the pandemic impacted the most in terms of confirmed positive cases- as recorded by the PHU (Public Health Units)? . Processing data for analysis . confirmed_cases_ts_df = pd.read_pickle(&#39;data/ontario-covid/confirmed_positive.pickle&#39;) . confirmed_cases_ts_df.head(2) . age_group gender case_count . 2020-01-23 00:00:00-05:00 50s | FEMALE | 1 | . 2020-01-23 00:00:00-05:00 50s | MALE | 1 | . confirmed_cases_ts_df.shape . (9959, 3) . confirmed_cases_age_grp_df = confirmed_cases_ts_df.copy() confirmed_cases_age_grp_df.head(2) . age_group gender case_count . 2020-01-23 00:00:00-05:00 50s | FEMALE | 1 | . 2020-01-23 00:00:00-05:00 50s | MALE | 1 | . confirmed_cases_age_grp_df.dtypes . age_group category gender category case_count int64 dtype: object . confirmed_cases_age_grp_df[&#39;age_limit&#39;] = confirmed_cases_age_grp_df[&#39;age_group&#39;].copy() confirmed_cases_age_grp_df[&#39;age_limit&#39;] . 2020-01-23 00:00:00-05:00 50s 2020-01-23 00:00:00-05:00 50s 2020-01-24 00:00:00-05:00 20s 2020-02-21 00:00:00-05:00 20s 2020-02-25 00:00:00-05:00 60s ... 2021-07-17 00:00:00-04:00 60s 2021-07-17 00:00:00-04:00 70s 2021-07-17 00:00:00-04:00 70s 2021-07-17 00:00:00-04:00 &lt;20 2021-07-17 00:00:00-04:00 &lt;20 Name: age_limit, Length: 9959, dtype: category Categories (9, object): [&#39;20s&#39;, &#39;30s&#39;, &#39;40s&#39;, &#39;50s&#39;, ..., &#39;70s&#39;, &#39;80s&#39;, &#39;90+&#39;, &#39;&lt;20&#39;] . confirmed_cases_age_grp_df[&#39;age_limit&#39;] = confirmed_cases_age_grp_df[&#39;age_limit&#39;].str.replace(&#39;&lt;20&#39;,&#39;19&#39;) confirmed_cases_age_grp_df[&#39;age_limit&#39;] = confirmed_cases_age_grp_df[&#39;age_limit&#39;].str.replace(&#39;s&#39;,&#39;&#39;) confirmed_cases_age_grp_df[&#39;age_limit&#39;] = confirmed_cases_age_grp_df[&#39;age_limit&#39;].str.replace(&#39;+&#39;,&#39;&#39;) confirmed_cases_age_grp_df.tail(2) . confirmed_cases_age_grp_df.dtypes . age_group category gender category case_count int64 age_limit object dtype: object . confirmed_cases_age_grp_df[&#39;age_limit&#39;]= confirmed_cases_age_grp_df[&#39;age_limit&#39;].astype(&#39;int&#39;) . # since bins must be longer than labels, start at 0 cut_points = [0,19,20,30,40,50,60,70,80,90] label_names = [&#39;12-19&#39;,&#39;20-29&#39;,&#39;30-39&#39;,&#39;40-49&#39;,&#39;50-59&#39;,&#39;60-69&#39;,&#39;70-79&#39;,&#39;80-89&#39;,&#39;90+&#39;] confirmed_cases_age_grp_df[&#39;age_category&#39;] = pd.cut(confirmed_cases_age_grp_df[&#39;age_limit&#39;], bins=cut_points, labels=label_names) . confirmed_cases_age_grp_df.tail(3) . age_group gender case_count age_limit age_category . 2021-07-17 00:00:00-04:00 70s | MALE | 3 | 70 | 70-79 | . 2021-07-17 00:00:00-04:00 &lt;20 | FEMALE | 24 | 19 | 12-19 | . 2021-07-17 00:00:00-04:00 &lt;20 | MALE | 26 | 19 | 12-19 | . confirmed_cases_age_grp_2020_df = confirmed_cases_age_grp_df[confirmed_cases_age_grp_df.index.year ==2020] confirmed_cases_age_grp_2020_df.tail(3) . age_group gender case_count age_limit age_category . 2020-12-31 00:00:00-05:00 90+ | MALE | 13 | 90 | 90+ | . 2020-12-31 00:00:00-05:00 &lt;20 | FEMALE | 207 | 19 | 12-19 | . 2020-12-31 00:00:00-05:00 &lt;20 | MALE | 226 | 19 | 12-19 | . confirmed_cases_age_grp_2021_df = confirmed_cases_age_grp_df[confirmed_cases_age_grp_df.index.year ==2021] confirmed_cases_age_grp_2021_df.tail(3) . age_group gender case_count age_limit age_category . 2021-07-17 00:00:00-04:00 70s | MALE | 3 | 70 | 70-79 | . 2021-07-17 00:00:00-04:00 &lt;20 | FEMALE | 24 | 19 | 12-19 | . 2021-07-17 00:00:00-04:00 &lt;20 | MALE | 26 | 19 | 12-19 | . confirmed cases distribution across age groups . age_cases_2020_grouped_df = confirmed_cases_age_grp_2020_df.groupby(&#39;age_category&#39;)[[&#39;case_count&#39;]].sum() age_cases_2020_grouped_df.head(3) . case_count . age_category . 12-19 24312 | . 20-29 38873 | . 30-39 29411 | . age_cases_2021_grouped_df = confirmed_cases_age_grp_2021_df.groupby(&#39;age_category&#39;)[[&#39;case_count&#39;]].sum() age_cases_2021_grouped_df.head(3) . case_count . age_category . 12-19 64205 | . 20-29 77155 | . 30-39 59896 | . age_cases_both_grouped_df = confirmed_cases_age_grp_df.groupby(&#39;age_category&#39;)[[&#39;case_count&#39;]].sum() age_cases_both_grouped_df.head(3) . case_count . age_category . 12-19 88517 | . 20-29 116028 | . 30-39 89307 | . gridspec.GridSpec(1,3) label = [&#39;Under 20&#39;,&#39;20s&#39;,&#39;30s&#39;,&#39;40s&#39;,&#39;50s&#39;,&#39;60s&#39;,&#39;70s&#39;,&#39;80s&#39;,&#39;90 and over&#39;] color = [&#39;#1D2F6F&#39;, &#39;#8390FA&#39;, &#39;#6EAF46&#39;, &#39;#FAC748&#39;,&#39;#2FAE9F&#39;,&#39;#D5AE9F&#39;,&#39;#D52A70&#39;,&#39;#552A8A&#39;,&#39;#D4C48A&#39;] fig = plt.figure(figsize=(35,40)) plt.subplot2grid((1,3),(0,0)) plt.pie(x=&#39;case_count&#39;, labels=label, data = age_cases_2020_grouped_df, textprops= {&#39;fontsize&#39;:16,&#39;fontweight&#39;:&#39;bold&#39;}, rotatelabels=30, autopct=&#39;%1.1f%%&#39;, shadow=True, colors=color) plt.title(&quot;2020 Cases by Age groups&quot;, fontdict={&#39;fontsize&#39;:30,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.subplot2grid((1,3),(0,1)) plt.pie(x=&#39;case_count&#39;, labels=label, data = age_cases_2021_grouped_df, textprops= {&#39;fontsize&#39;:16,&#39;fontweight&#39;:&#39;bold&#39;}, rotatelabels=20, autopct=&#39;%1.1f%%&#39;, shadow=True, colors=color) plt.title(&quot;2021 Cases by Age groups&quot;, fontdict={&#39;fontsize&#39;:30,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.subplot2grid((1,3),(0,2)) plt.pie(x=&#39;case_count&#39;, labels=label, data = age_cases_both_grouped_df, textprops= {&#39;fontsize&#39;:16,&#39;fontweight&#39;:&#39;bold&#39;}, rotatelabels=45, autopct=&#39;%1.1f%%&#39;, shadow=True, colors=color) plt.title(&quot;Both years combined&quot;, fontdict={&#39;fontsize&#39;:30,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.legend(loc=&#39;upper right&#39;, ncol=3) plt.show() . Age group frequency processing . age_cat_frq_df_2020 = confirmed_cases_age_grp_2020_df[&#39;age_category&#39;].value_counts().sort_index().to_frame() age_cat_frq_df_2020 . age_category . 12-19 634 | . 20-29 669 | . 30-39 663 | . 40-49 662 | . 50-59 641 | . 60-69 637 | . 70-79 597 | . 80-89 552 | . 90+ 479 | . age_cat_frq_df_2020[&#39;normalized_freq&#39;] = confirmed_cases_age_grp_2020_df[&#39;age_category&#39;].value_counts(normalize=True)*100 age_cat_frq_df_2020[&#39;cummulative_freq&#39;] = age_cat_frq_df_2020[&#39;normalized_freq&#39;].cumsum() age_cat_frq_df_2020 . age_category normalized_freq cummulative_freq . 12-19 634 | 11.456451 | 11.456451 | . 20-29 669 | 12.088905 | 23.545356 | . 30-39 663 | 11.980484 | 35.525840 | . 40-49 662 | 11.962414 | 47.488254 | . 50-59 641 | 11.582942 | 59.071196 | . 60-69 637 | 11.510661 | 70.581858 | . 70-79 597 | 10.787857 | 81.369714 | . 80-89 552 | 9.974702 | 91.344416 | . 90+ 479 | 8.655584 | 100.000000 | . age_cat_frq_df_2021 = confirmed_cases_age_grp_2021_df[&#39;age_category&#39;].value_counts().sort_index().to_frame() age_cat_frq_df_2021 . age_category . 12-19 539 | . 20-29 565 | . 30-39 554 | . 40-49 524 | . 50-59 525 | . 60-69 490 | . 70-79 447 | . 80-89 424 | . 90+ 357 | . age_cat_frq_df_2021[&#39;normalized_freq&#39;] = confirmed_cases_age_grp_2021_df[&#39;age_category&#39;].value_counts(normalize=True)*100 age_cat_frq_df_2021[&#39;cummulative_freq&#39;] = age_cat_frq_df_2021[&#39;normalized_freq&#39;].cumsum() age_cat_frq_df_2021 . age_category normalized_freq cummulative_freq . 12-19 539 | 12.180791 | 12.180791 | . 20-29 565 | 12.768362 | 24.949153 | . 30-39 554 | 12.519774 | 37.468927 | . 40-49 524 | 11.841808 | 49.310734 | . 50-59 525 | 11.864407 | 61.175141 | . 60-69 490 | 11.073446 | 72.248588 | . 70-79 447 | 10.101695 | 82.350282 | . 80-89 424 | 9.581921 | 91.932203 | . 90+ 357 | 8.067797 | 100.000000 | . label = [&#39;Under 20&#39;,&#39;20s&#39;,&#39;30s&#39;,&#39;40s&#39;,&#39;50s&#39;,&#39;60s&#39;,&#39;70s&#39;,&#39;80s&#39;,&#39;90 and over&#39;] width= 0.45 err_2020 = age_cat_frq_df_2020[&#39;normalized_freq&#39;].max() err_2021 = age_cat_frq_df_2021[&#39;normalized_freq&#39;].max() pltx=0 fig, ax = plt.subplots(1, figsize=(13,6)) ax.bar(x=label, height=age_cat_frq_df_2020[&#39;normalized_freq&#39;], width=width, label=&#39;2020&#39;, color =&#39;#1D2F6F&#39;) ax.bar(x=label, height=age_cat_frq_df_2021[&#39;normalized_freq&#39;], width=width, bottom=age_cat_frq_df_2020[&#39;normalized_freq&#39;], label=&#39;2021&#39;, color =&#39;darkgreen&#39;) ax.set_xlabel(&#39;Age groups&#39;,size=16) ax.set_ylabel(&#39;Frequency&#39;, size=16) # plt.xticks(size=14) # plt.yticks(size=14) ax.set_title(&#39;Confirmed Cases Distribution by age groups&#39;, fontdict={&#39;weight&#39;:&#39;bold&#39;, &#39;size&#39;:14, &#39;color&#39;:&#39;darkblue&#39;}) ax.legend(loc=&#39;upper right&#39;, ncol = 2) plt.annotate(&quot;23.64&quot;,(38,297.24), xycoords=&#39;axes points&#39;) plt.annotate(&quot;24.86&quot;,(115,312), xycoords=&#39;axes points&#39;) plt.annotate(&quot;24.49&quot;,(190,307), xycoords=&#39;axes points&#39;) plt.savefig(&#39;ontario-images/fig_3&#39;, format=&#39;png&#39;) plt.show() . CONCLUSION: . 99.14% percent of the age groups of positive cases were accurately provided and used in this analysis. | Based on that data, it can be observed that young adults, in their 20s, were the population with the most number of positive covid cases in ontario. | . Sub-question 2: What percentage of the affected popultion were under 70 years in both years of the pandemic . gridspec.GridSpec(1,2) fig = plt.figure(figsize=(15,6)) plt.subplot2grid((1,2),(0,0)) age_cat_frq_df_2020[&#39;cummulative_freq&#39;].plot(color=&#39;r&#39;) plt.title(&quot;Frequency of Cases by Age: 2020&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;}) plt.annotate(&quot;population under 70 years: 70.58%&quot;, (231.79,209.2), xycoords=&#39;axes points&#39;) plt.legend(loc=&#39;upper left&#39;) plt.grid() plt.subplot2grid((1,2),(0,1)) age_cat_frq_df_2021[&#39;cummulative_freq&#39;].plot(color=&#39;green&#39;) plt.title(&quot;Frequency of Cases by Age: 2021&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;}) plt.annotate(&quot;population under 70 years: 72.25%&quot;, (231.98,216.5), xycoords=&#39;axes points&#39;) plt.legend(loc=&#39;upper left&#39;) plt.grid() plt.savefig(&#39;ontario-images/fig_3_1&#39;, format=&#39;png&#39;) plt.show() . CONCLUSION: . Based on that data, in 2020, it was observed that about 70.58% of people affected by covid were under 70. | In 2021, approximately 72.25% of people affected by covid were under 70years of age. | . How does the proportion of affected groups compare with the those getting vaccinated? . vacc_data_ts_df = pd.read_pickle(&#39;data/ontario-covid/vaccine_data.pickle&#39;) . # create age_bin for vaccination data that for those less than 19 - so it matches vacc_data_ts_df.head(2) . age_group partially_vaccinated fully_vaccinated total_population %_partially_vaccinated %_fully_vaccinated . date . 2020-12-16 00:00:00-05:00 12-17yrs | 0 | 0 | 951519 | 0.0 | 0.0 | . 2020-12-16 00:00:00-05:00 18-29yrs | 45 | 0 | 2455535 | 0.0 | 0.0 | . vacc_data_ts_processing_df = vacc_data_ts_df.copy() vacc_data_ts_processing_df.head(2) . age_group partially_vaccinated fully_vaccinated total_population %_partially_vaccinated %_fully_vaccinated . date . 2020-12-16 00:00:00-05:00 12-17yrs | 0 | 0 | 951519 | 0.0 | 0.0 | . 2020-12-16 00:00:00-05:00 18-29yrs | 45 | 0 | 2455535 | 0.0 | 0.0 | . vacc_data_ts_grp_df = vacc_data_ts_processing_df.groupby(&#39;age_group&#39;)[vacc_data_ts_processing_df.columns].sum() vacc_data_ts_grp_df.head(2) . partially_vaccinated fully_vaccinated total_population %_partially_vaccinated %_fully_vaccinated . age_group . 12-17yrs 23735994 | 3112029 | 203625066 | 24.9341 | 3.2497 | . 18-29yrs 102561542 | 24133285 | 525484490 | 41.7673 | 9.8278 | . vacc_data_ts_grp_df.drop(index=[&#39;Adults_18plus&#39;,&#39;Ontario_12plus&#39;,&#39;Undisclosed_or_missing&#39;],inplace=True) . vacc_data_ts_grp_df[&#39;%_of_partial_across_groups&#39;] = vacc_data_ts_grp_df[&#39;partially_vaccinated&#39;]/vacc_data_ts_grp_df[&#39;partially_vaccinated&#39;].sum()*100 vacc_data_ts_grp_df[&#39;%_of_full_across_groups&#39;] = vacc_data_ts_grp_df[&#39;fully_vaccinated&#39;]/vacc_data_ts_grp_df[&#39;fully_vaccinated&#39;].sum() * 100 vacc_data_ts_grp_df.head(3) . partially_vaccinated fully_vaccinated total_population %_partially_vaccinated %_fully_vaccinated %_of_partial_across_groups %_of_full_across_groups . age_group . 12-17yrs 23735994 | 3112029 | 203625066 | 24.9341 | 3.2497 | 2.952888 | 1.419783 | . 18-29yrs 102561542 | 24133285 | 525484490 | 41.7673 | 9.8278 | 12.759219 | 11.010189 | . 30-39yrs 98470705 | 26377414 | 439996626 | 47.8898 | 12.8317 | 12.250296 | 12.034015 | . gridspec.GridSpec(1,3) label_cases = [&#39;Under 20&#39;,&#39;20s&#39;,&#39;30s&#39;,&#39;40s&#39;,&#39;50s&#39;,&#39;60s&#39;,&#39;70s&#39;,&#39;80s&#39;,&#39;90 and over&#39;] label_vacc = [&#39;12-17yrs&#39;,&#39;18-29yrs&#39;,&#39;30s&#39;,&#39;40s&#39;,&#39;50s&#39;,&#39;60s&#39;,&#39;70s&#39;,&#39;80+&#39;] color = [&#39;#1D2F6F&#39;, &#39;#8390FA&#39;, &#39;#6EAF46&#39;, &#39;#FAC748&#39;,&#39;#2FAE9F&#39;,&#39;#D5AE9F&#39;,&#39;#D52A70&#39;,&#39;#552A8A&#39;,&#39;#D4C48A&#39;] fig = plt.figure(figsize=(35,30)) plt.subplot2grid((1,3),(0,0)) plt.pie(x=&#39;partially_vaccinated&#39;, labels=label_vacc, data = vacc_data_ts_grp_df, textprops= {&#39;fontsize&#39;:20,&#39;fontweight&#39;:&#39;bold&#39;}, rotatelabels=35, autopct=&#39;%1.1f%%&#39;, shadow=True) plt.title(&quot;Partial Vaccinations&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.legend(loc=&#39;upper right&#39;, ncol=2) plt.subplot2grid((1,3),(0,1)) plt.pie(x=&#39;fully_vaccinated&#39;, labels=label_vacc, data = vacc_data_ts_grp_df, textprops= {&#39;fontsize&#39;:20,&#39;fontweight&#39;:&#39;bold&#39;}, rotatelabels=45, autopct=&#39;%1.1f%%&#39;, shadow=True) plt.title(&quot;Full Vaccinations&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.legend(loc=&#39;upper right&#39;, ncol=2) plt.subplot2grid((1,3),(0,2)) plt.pie(x=&#39;case_count&#39;, labels=label_cases, data = age_cases_both_grouped_df, textprops= {&#39;fontsize&#39;:20,&#39;fontweight&#39;:&#39;bold&#39;}, rotatelabels=45, autopct=&#39;%1.1f%%&#39;, shadow=True, colors=color) plt.title(&quot;Covid Cases throughout covid-19&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.legend(loc=&#39;upper right&#39;, ncol=3) plt.savefig(&#39;ontario-images/fig_4&#39;, format=&#39;png&#39;) plt.show() . Conclusion While cases are higher with the younger population, vaccination efforts have a higher spread amongst the older population. This might potential slow down the province&#39;s rate of overcoming the pandemic . How has the pandemic impacted the community&#39;s mobility? Is there an observable effect on the number of cases in the province? . ontariocovid_vaccine_processing_df = ontariocovid_vaccine_ts_df.copy() ontariocovid_vaccine_processing_df.head(2) . change_cases change_fatalities change_tests change_hospitalizations change_criticals change_recoveries change_vaccinations change_vaccinated change_vaccines_distributed total_cases total_fatalities total_tests total_hospitalizations total_criticals total_recoveries total_vaccinations total_vaccinated total_vaccines_distibuted . 2020-01-25 00:00:00-05:00 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2020-01-26 00:00:00-05:00 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . ontariocovid_vaccine_processing_df[&#39;cases_moving_average&#39;] = ontariocovid_vaccine_processing_df[&#39;change_cases&#39;].rolling(window=30).mean() ontariocovid_vaccine_processing_df.head(2) . change_cases change_fatalities change_tests change_hospitalizations change_criticals change_recoveries change_vaccinations change_vaccinated change_vaccines_distributed total_cases total_fatalities total_tests total_hospitalizations total_criticals total_recoveries total_vaccinations total_vaccinated total_vaccines_distibuted cases_moving_average . 2020-01-25 00:00:00-05:00 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | NaN | . 2020-01-26 00:00:00-05:00 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | NaN | . mobility_processing_df = pd.read_pickle(&#39;data/ontario-covid/mobility.pickle&#39;) mobility_processing_df.head(2) . retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 2020-02-15 00:00:00-05:00 6.234043 | 4.340426 | 12.851064 | 14.744681 | 1.638298 | -0.617021 | . 2020-02-16 00:00:00-05:00 15.234043 | 14.085106 | 19.680851 | 4.085106 | -1.468085 | -1.212766 | . # focus is given more to 2021 as mobility data is for 2021 gridspec.GridSpec(1,3) fig = plt.figure(figsize=(28,7)) plt.subplot2grid((1,3),(0,0)) ontariocovid_vaccine_processing_df[&#39;change_cases&#39;].plot(color=&#39;darkred&#39;, label=&#39;Positive Cases Publicly Reported&#39;) ontariocovid_vaccine_processing_df[&#39;cases_moving_average&#39;].plot(color=&#39;darkgray&#39;, linestyle=&#39;dashed&#39;, label=&#39; 30 Day Moving average&#39;, linewidth=2) plt.annotate(&quot;08-01-21: 4249 cases&quot;, (250,325), xycoords=&#39;axes pixels&#39;, size=13) plt.annotate(&quot;16-04-21: 4812 cases&quot;, (350,365.89), xycoords=&#39;axes pixels&#39;, size=13) plt.annotate(&quot;02-02-21: 745 cases&quot;, (290,63.89), xycoords=&#39;axes pixels&#39;, size=13) plt.ylabel(&#39;Number of cases&#39;) plt.xlabel(&#39;Months of the Year&#39;) plt.title(&quot;Trend of change in covid-19 cases daily&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.grid(axis=&#39;both&#39;) plt.legend() plt.subplot2grid((1,3),(0,1)) mobility_processing_df[&#39;retail_and_recreation_percent_change_from_baseline&#39;].plot(color=&#39;#1D2F6F&#39;, label =&#39;Retail and Recreation&#39;) mobility_processing_df[&#39;retail_and_recreation_percent_change_from_baseline&#39;].rolling(window=30).mean().plot(color=&#39;darkgray&#39;, linestyle=&#39;dashed&#39;,label=&#39; 30 Day Moving average&#39;, linewidth=2) plt.annotate(&quot;12-04-20: -74.68%&quot;,(20.67,11.99), xycoords=&#39;axes pixels&#39;, size=13) plt.annotate(&quot;23-12-20: 11.37%&quot;, (244,321.92), xycoords=&#39;axes pixels&#39;, size=13) plt.annotate(&quot;25-12-20: -75.63&quot;,(200.67,10.99), xycoords=&#39;axes pixels&#39;, size=13) plt.annotate(&quot;01-04-21: 13.46%&quot;, (374.4,365.89), xycoords=&#39;axes pixels&#39;, size=13) plt.ylabel(&#39;Percentage Change of Activities&#39;) plt.xlabel(&#39;Months of the Year&#39;) plt.title(&quot;Retail and Recreation Activities&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.grid(axis=&#39;both&#39;) plt.legend() plt.subplot2grid((1,3),(0,2)) mobility_processing_df[&#39;grocery_and_pharmacy_percent_change_from_baseline&#39;].plot(color=&#39;#6EAF46&#39;, label=&#39;Grocery and Pharmacy&#39;) mobility_processing_df[&#39;grocery_and_pharmacy_percent_change_from_baseline&#39;].rolling(window=30).mean().plot(color=&#39;darkgray&#39;, linestyle=&#39;dashed&#39;,label=&#39; 30 Day Moving average&#39;, linewidth=2) plt.ylabel(&#39;Percentage Change of Activities&#39;) plt.xlabel(&#39;Months of the Year&#39;) plt.title(&quot;Grocery and Pharmacy&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.grid(axis=&#39;both&#39;) plt.legend() plt.savefig(&#39;ontario-images/fig_5_1&#39;, format=&#39;png&#39;) plt.show() # color = [&#39;#1D2F6F&#39;, &#39;#8390FA&#39;, &#39;#6EAF46&#39;, &#39;#FAC748&#39;,&#39;#2FAE9F&#39;,&#39;#D5AE9F&#39;,&#39;#D52A70&#39;,&#39;#552A8A&#39;,&#39;#D4C48A&#39;, &#39;#F4DABD&#39;] . . Observation . Although Ontario publicly reported it&#39;s first case as of January 25th, the rates of progression became more obvious in March and the province recorded it&#39;s first death in the same month. . | Ontario experienced it&#39;s first highest number of Cases per day on the 8th of January 2021 where 4249 people were reported to have tested positive. It then experienced a gradual decline with some and saw as low as only 745 positive cases on 2021-02-02. Although there were fluctuations in cases, it stayed under 2000 until 2021-03-25 with 2380 cases, then progressed gradually until the next peak on the 16th of April 2021 (4812 cases) - based on the data collected as of 17th July, 2021. . | Retail and recreation have experienced more of a decline from the baseline that it has exceeded in 2021. This can possibly be attributed to the stay-at-home orders and states of emergency declarations that have limited people from moving freely and businesses from being open. . | Although grocery and pharmacies have been exempted from most operational restrictions like closure, there has been some sudden peaks and dips but movement has stayed fairly consistent around the baseline with +-23% changes . | . &lt;/br&gt; &lt;/br&gt; . . ADDITIONAL NOTE ON TIMELINES . . Shortly after that, a state of emergency was declared and the non-essential movements were regulated as of Mar. 17th. . | May 11, 2020: residents were allowed to walk, hike, bike and bird watch in provincial parks. Camping and access to beaches will remain closed. . | May 16, 2020: Some businesses open: including campgrounds, marinas and golf courses. . | Jul 31, 2020: Province was open again. . | Sep. 8, 2020: pause on loosening any more restrictions. . | Sept. 28, 2020: Restrictions started getting tightened and it was announced that the province was officially in the second wave of the pandemic. . | Sep. 30, 2020: the province could see upwards of 1,000 cases a day in October, as the second wave is in full swing (Health officials). . | Oct. 9, 2020: closure of indoor activities . | Feb. 16 and 19, 2021: first set of provinces go out of lockdown except Toronto, Peel Region and North Bay-Parry Sound - for 2 weeks more (Mar. 2). . | Apr. 7, 2021: The Ford government declares the province’s third state of emergency amid the COVID-19 pandemic and is issuing a provincewide stay-at-home order. The order will last for four weeks. . | June 11, latest reopening . | . gridspec.GridSpec(1,3) fig = plt.figure(figsize=(28,7)) plt.subplot2grid((1,3),(0,0)) ontariocovid_vaccine_processing_df[&#39;change_cases&#39;].plot(color=&#39;darkred&#39;, label=&#39;Positive Cases Publicly Reported&#39;) ontariocovid_vaccine_processing_df[&#39;cases_moving_average&#39;].plot(color=&#39;darkgray&#39;, linestyle=&#39;dashed&#39;, label=&#39; 30 Day Moving average&#39;, linewidth=2) plt.annotate(&quot;08-01-21: 4249 cases&quot;, (250,325), xycoords=&#39;axes pixels&#39;, size=13) plt.annotate(&quot;16-04-21: 4812 cases&quot;, (350,365.89), xycoords=&#39;axes pixels&#39;, size=13) plt.annotate(&quot;02-02-21: 745 cases&quot;, (290,63.89), xycoords=&#39;axes pixels&#39;, size=13) plt.ylabel(&#39;Number of cases&#39;) plt.xlabel(&#39;Months of the Year&#39;) plt.title(&quot;Trend of change in covid-19 cases daily&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.grid(axis=&#39;both&#39;) plt.legend() plt.subplot2grid((1,3),(0,1)) mobility_processing_df[&#39;parks_percent_change_from_baseline&#39;].plot(color=&#39;#284C5D&#39;, label =&#39;Parks&#39;) mobility_processing_df[&#39;parks_percent_change_from_baseline&#39;].rolling(window=30).mean().plot(color=&#39;darkgray&#39;, linestyle=&#39;dashed&#39;,label=&#39; 30 Day Moving average&#39;, linewidth=2) plt.annotate(&quot;Highest Positive Change from Baseline&quot;, (260.4,365.89), xycoords=&#39;axes pixels&#39;) plt.ylabel(&#39;Percentage Change of Activities&#39;) plt.xlabel(&#39;Months of the Year&#39;) plt.title(&quot;Parks&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.grid(axis=&#39;both&#39;) plt.legend(loc=&#39;upper left&#39;) plt.subplot2grid((1,3),(0,2)) mobility_processing_df[&#39;transit_stations_percent_change_from_baseline&#39;].plot(color=&#39;#552A8A&#39;, label=&#39;Transit Stations&#39;) mobility_processing_df[&#39;transit_stations_percent_change_from_baseline&#39;].rolling(window=30).mean().plot(color=&#39;darkgray&#39;, linestyle=&#39;dashed&#39;,label=&#39; 30 Day Moving average&#39;, linewidth=2) plt.annotate(&quot;10-04-20: -42.85%&quot;, (10.67,17.43), xycoords=&#39;axes pixels&#39;,size=13) plt.annotate(&quot;01-08-20: 7.36%&quot;, (120,319.99), xycoords=&#39;axes pixels&#39;, size=13) plt.annotate(&quot;01-01-21: -43.63%&quot;, (232.5,13.88), xycoords=&#39;axes pixels&#39;, size=13) plt.ylabel(&#39;Percentage Change of Activities&#39;) plt.xlabel(&#39;Months of the Year&#39;) plt.title(&quot;Transit Stations&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.grid(axis=&#39;both&#39;) plt.legend() plt.savefig(&#39;ontario-images/fig_5_2&#39;, format=&#39;png&#39;) plt.show() # # color = [&#39;#1D2F6F&#39;, &#39;#8390FA&#39;, &#39;#6EAF46&#39;, &#39;#FAC748&#39;,&#39;#2FAE9F&#39;,&#39;#D5AE9F&#39;,&#39;#D52A70&#39;,&#39;#552A8A&#39;,&#39;#D4C48A&#39;, &#39;#F4DABD&#39;] . Observation . Movements to the parks experrienced a decline early in the year, which is typically expected due to weather condition at the time. However, more drops below the baseline were experienced in March, leading up to the early parts of april, then it increased above the baseline as restrictions eased in the province. A similar fluctuating pattern can be observed throughout the period being analyzed. . | For transit stations have seen less people movements. Although alot of fluctuations have been observed, it has consistently been below the baseline. . | . gridspec.GridSpec(1,3) fig = plt.figure(figsize=(28,7)) plt.subplot2grid((1,3),(0,0)) ontariocovid_vaccine_processing_df[&#39;change_cases&#39;].plot(color=&#39;darkred&#39;, label=&#39;Positive Cases Publicly Reported&#39;) ontariocovid_vaccine_processing_df[&#39;cases_moving_average&#39;].plot(color=&#39;darkgray&#39;, linestyle=&#39;dashed&#39;, label=&#39; 30 Day Moving average&#39;, linewidth=2) plt.annotate(&quot;08-01-21: 4249 cases&quot;, (250,325), xycoords=&#39;axes pixels&#39;, size=13) plt.annotate(&quot;16-04-21: 4812 cases&quot;, (350,365.89), xycoords=&#39;axes pixels&#39;, size=13) plt.annotate(&quot;02-02-21: 745 cases&quot;, (290,63.89), xycoords=&#39;axes pixels&#39;, size=13) plt.ylabel(&#39;Number of cases&#39;) plt.xlabel(&#39;Months of the Year&#39;) plt.title(&quot;Trend of change in covid-19 cases daily&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.grid(axis=&#39;both&#39;) plt.legend() plt.subplot2grid((1,3),(0,1)) mobility_processing_df[&#39;workplaces_percent_change_from_baseline&#39;].plot(color=&#39;#287EB2&#39;, label =&#39;Work Places&#39;) mobility_processing_df[&#39;workplaces_percent_change_from_baseline&#39;].rolling(window=30).mean().plot(color=&#39;darkgray&#39;, linestyle=&#39;dashed&#39;,label=&#39; 30 Day Moving average&#39;, linewidth=2) plt.ylabel(&#39;Percentage Change of Activities&#39;) plt.xlabel(&#39;Months of the Year&#39;) plt.title(&quot;Work Places&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.grid(axis=&#39;both&#39;) plt.legend() plt.subplot2grid((1,3),(0,2)) mobility_processing_df[&#39;residential_percent_change_from_baseline&#39;].plot(color=&#39;#E4C071&#39;, label=&#39;Residential&#39;) mobility_processing_df[&#39;residential_percent_change_from_baseline&#39;].rolling(window=30).mean().plot(color=&#39;darkgray&#39;, linestyle=&#39;dashed&#39;,label=&#39; 30 Day Moving average&#39;, linewidth=2) plt.ylabel(&#39;Percentage Change of Activities&#39;) plt.xlabel(&#39;Months of the Year&#39;) plt.title(&quot;Residential&quot;, fontdict={&#39;fontsize&#39;:14,&#39;fontweight&#39;:&#39;bold&#39;,&#39;color&#39;:&#39;darkblue&#39;}) plt.grid(axis=&#39;both&#39;) plt.legend() plt.savefig(&#39;ontario-images/fig_5_3&#39;, format=&#39;png&#39;) plt.show() # # color = [&#39;#1D2F6F&#39;, &#39;#8390FA&#39;, &#39;#6EAF46&#39;, &#39;#FAC748&#39;,&#39;#2FAE9F&#39;,&#39;#D5AE9F&#39;,&#39;#D52A70&#39;,&#39;#552A8A&#39;,&#39;#D4C48A&#39;, &#39;#F4DABD&#39;] . Observation . Although movement to workplaces was a little above the baseline early in March, a state of emergency was declared in the province on March 17th and it&#39;s effects can be observed as movements to workplaces dropped. Workplace-related movements have remained under the baseline throughout the pandemic. This can be attributable to the prolonged restrictions and the the fact that most workers who are able to fulfill the job responsibilities from home are working remotely. . | Residential movements have stayed above the baseline almost all throughout the pandemic and experienced few occassional drops below the baseline. . | . Conclusion . Despite activities slowing down and the preventative measures adopted by he government, the number of cases in the province continued to rise and saw it&#39;s two major peaks during the goevernment imposed stay-at-home order. | . Conclusions . The data shows that there is correlation between covid activties and the preventive solution - vaccinations. Although levels of correlation differ, total cases has a positive correlation with the totals of other activities. Total cases vs Total fatalities has a correlation of ~0.96 | Total cases vs Total tests has a correlation of ~0.98 | Total cases vs Total hospitalizations has a correlation of ~0.50 | Total cases vs Total criticals has a correlation of ~0.79 | Total cases vs Total recoveries has a correlation of ~0.99 | Total cases vs Partial vaccinations has a correlation of ~0.83 | Total cases vs Full vaccinations has a correlation of ~0.60 | Total cases vs Vaccines distributed has a correlation of ~0.83 | . | While there is a very low correlation between the days of the week and total cases in ontario, a bar plot shows that the daily number of cases tends to differ across the different days of the week. Daily changes in covid cases seem to rises on Thursday into the weekend, fluctuates between saturday to sunday and makes a U-shaped movement between Monday and Wednesday. From the data, Friday, April 16 2021, is the day with the highest number of cases. . | Furthermore, although the older population in Ontario are said to have a higher risk of contracting the virus, the data shows that there is a higher number of people testing positive amongst young adults in their 20s and 30s. Findings are based on only 99.14% collected as some rows were lost during data cleaning. . | Despite cases being higher amongst the younger population, as of July 17-2021,preventive (vaccination) efforts had a higher spread amongst the older population. If events progress at this rate, it will likely slow down the speed with which the province overcomes the pandemic. . | Additionally, irrespective of activities slowing down and the preventative measures, such as full lockdowns and restricted movements, adopted by the government, the number of cases in the province has continued to rise. It can also be noted that daily change in cases saw it&#39;s two major peaks during the goevernment imposed stay-at-home order. . | . Recommendations: . In the event of future pandemics, to overcome it&#39;s impact faster, it is recommended that Ontario; . expands vaccination opportunities to include the younger demographic as this can potentially reduces the number of cases and prologned spread in the province. | Continue large scale public education on hygiene measures such as; washing hands, wearing masks, sanitizing shared spaces etc, to minimize each individual&#39;s chances of contracting the virus. | Analyse the impact of mobility restriction measures periodically to determine how viable that solution is. If cases tend to increase drastically at the end of lockdowns, it might be due to asymtomatic carriers suddenly mixing up with others whenever some degree of freedom is allowed. | Explore limiting capacity as opposed to full lockdowns during a pandemic. This would likely decrease the sudden excitement for everyone to be outside at the same time and would increase the possibility of knowing who was where and when. E.g: via the barcode registrations required by some enclosed spaces presently. | .",
            "url": "https://enobongudoh.github.io/data-science-projects/covid-19/ontario/canada/2021/09/09/eu-ontario-data-exploration.html",
            "relUrl": "/covid-19/ontario/canada/2021/09/09/eu-ontario-data-exploration.html",
            "date": " • Sep 9, 2021"
        }
        
    
  
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://enobongudoh.github.io/data-science-projects/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://enobongudoh.github.io/data-science-projects/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". My name is Enobong Nkpoikana Udoh. I am an MBA graduate from the university of Aberdeen, Scotland with a Bachelor of Science degree in Management Information Systems. . My interest in improving processes and decision quality from learnings, using technology, led me to the interesting path that is data science. I am excited about the opportunity to transform raw data into meaningful insights that can support informed decision making. I’m also a skilled communicator, an excellent project coordination with an eye for detail and a creative problem-solver who delivers value on team and individual projects. . Outside of data science, I enjoy watching tv shows, catching up with loved ones, exercising and travelling. . “Success is not final, failure is not fatal: It is the courage to continue that counts.” —Winston Churchill .",
          "url": "https://enobongudoh.github.io/data-science-projects/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://enobongudoh.github.io/data-science-projects/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}