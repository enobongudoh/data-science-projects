{
  
    
  
    
        "post1": {
            "title": "Effectiveness of Covid-19 management and preventative measures in Ontario, Canada.",
            "content": "Data collection . The following datasets were identified to fulfill the analysis requirement: . Ontario&#39;s Covid-19 Pandemic and Vaccination trends from 25-January-2020 to 17-July-2021 . Data Source | . | Confirmed Positive Cases in cities within Ontario (with age) . Data Source | Data Dictionary | . | Ontario Vaccination data (by age) . Data Source | Data Dictionary | . | Google Covid-19 mobility report . Data Source | Data Dictionary Note: The baseline in mobility data is the median value, for the corresponding day of the week, during the 5-week period Jan 3–Feb 6, 2020 | . | . Data understanding . Features Explored In Ontario&#39;s Covid-19 Pandemic and Vaccination trends from 25-January-2020 to 17-July-2021: . date - The date of activities captured in the dataset | change_cases - The number of new cases as of each day | change_fatalities - The number of new hospitalizations as of each day | change_tests - The number of new tests as of each day | change_hospitalizations - The number of new hospitalizations as of each day | change_criticals - The number of new critcal cases as of each day | change_recoveries - The number of recovered patients as of each day | change_vaccinations - The number of new single-dosed vaccinated people as of each day | change_vaccinated - The number of fully vaccinated people as of each day | change_vaccines_distributed - The number of vaccines made available to the province as of each day | total_cases - Total number of covid cases | total_fatalities - Total number of covid-related fatalities | total_tests - Total number of covid tests | total_hospitalizations - Total number of covid-related hospitalizations | total_critcals - Total number of covid-related critical care patients | total_recoveries - Total number of recoveries | total_vaccinations - Total number of covid vaccinations (first dose) | total_vaccinated - Total number of fully vaccinated people | total_vaccines_distributed - Total number of vaccines distributed across the province | NOTE: Other Datasets used are accompanied with links to their dictionaries above. . . Importing project dependencies . Required libraries are: . pandas : required to access dataset .csv file and work with data in tabular representation. . | numpy required to round the data in the correlation matrix. . | matplotlib, seaborn, pylab required for data visualization. . | missingno, used to understand and visualize the prsence and distribution of missing values in data . | pandas_profiling and pandas_profiling.utils.cache, used as a guiding tool to profile date . | # ! pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip . import pandas as pd import numpy as np import matplotlib.pyplot as plt import matplotlib.gridspec as gridspec import missingno import mpl_toolkits.mplot3d as m3d import seaborn as sns import matplotlib from pylab import * from pylab import rcParams # import pandas_profiling # from pandas_profiling import ProfileReport # from pandas_profiling.utils.cache import cache_file . print(f&quot;numpy version: {np.__version__}&quot;) print(f&quot;pandas version: {pd.__version__}&quot;) # print(f&quot;pandas profiling version: {pandas_profiling.__version__}&quot;) . numpy version: 1.20.1 pandas version: 1.2.4 . Data preparation . In this section, data will be imported and exploratory data analysis will be carried out. Data types, missing values, duplicates, measures of the central trend, and also the relationship between variables will be described. . Utility functions . The following utility functions are used to support exploratory data analysis work. . &#39;&#39;&#39; Searching for percentage of missing data in each column &#39;&#39;&#39; def precent_na_in_cols(df): for items in df.columns: missingvaluecheck = df[items].isnull().mean() print(f&quot;{items} - {missingvaluecheck :.1%}&quot;) . . &#39;&#39;&#39; quick duplicate search for entire df with response &#39;&#39;&#39; def dup_quick_search(df): if df.duplicated().any()==True: print(&#39;There are some duplicates&#39;) else: print(&#39;There are no duplicates&#39;) . . &#39;&#39;&#39; duplicate search for non-numeric columns in df with response &#39;&#39;&#39; def non_num_dup_search(df): non_number_columns = list(df.select_dtypes(exclude=(&#39;int&#39;, &#39;float&#39;)).columns) print(f&#39;Columns without numeric data: {&quot;, &quot;.join(non_number_columns)}.&#39;) for column in non_number_columns: if df[column].duplicated().any()==True: print(f&#39;The duplicate columns are {column}&#39;) else: print(&#39;There are no duplicate columns in this data&#39;) . . A. Ontario Covid and Vaccine data . Data types . ontariocovid_vaccine_raw_df = pd.read_csv(&#39;data/ontario-covid/OntarioDS.csv&#39;) . ontariocovid_vaccine_raw_df.head(2) . province last_updated data » date data » change_cases data » change_fatalities data » change_tests data » change_hospitalizations data » change_criticals data » change_recoveries data » change_vaccinations ... data » change_vaccines_distributed data » total_cases data » total_fatalities data » total_tests data » total_hospitalizations data » total_criticals data » total_recoveries data » total_vaccinations data » total_vaccinated data » total_vaccines_distributed . 0 on | 2021-07-17 8:26:38 | 2020-01-25 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 NaN | NaN | 2020-01-26 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2 rows × 21 columns . ontariocovid_vaccine_raw_df.columns . Index([&#39;province&#39;, &#39;last_updated&#39;, &#39;data » date&#39;, &#39;data » change_cases&#39;, &#39;data » change_fatalities&#39;, &#39;data » change_tests&#39;, &#39;data » change_hospitalizations&#39;, &#39;data » change_criticals&#39;, &#39;data » change_recoveries&#39;, &#39;data » change_vaccinations&#39;, &#39;data » change_vaccinated&#39;, &#39;data » change_vaccines_distributed&#39;, &#39;data » total_cases&#39;, &#39;data » total_fatalities&#39;, &#39;data » total_tests&#39;, &#39;data » total_hospitalizations&#39;, &#39;data » total_criticals&#39;, &#39;data » total_recoveries&#39;, &#39;data » total_vaccinations&#39;, &#39;data » total_vaccinated&#39;, &#39;data » total_vaccines_distributed&#39;], dtype=&#39;object&#39;) . ontariocovid_vaccine_raw_df.dtypes . province object last_updated object data » date object data » change_cases int64 data » change_fatalities int64 data » change_tests int64 data » change_hospitalizations int64 data » change_criticals int64 data » change_recoveries int64 data » change_vaccinations int64 data » change_vaccinated int64 data » change_vaccines_distributed int64 data » total_cases int64 data » total_fatalities int64 data » total_tests int64 data » total_hospitalizations int64 data » total_criticals int64 data » total_recoveries int64 data » total_vaccinations int64 data » total_vaccinated int64 data » total_vaccines_distributed int64 dtype: object . print(f&quot;The size of the raw ontario covid and vaccince data is {ontariocovid_vaccine_raw_df.size}&quot;) print(f&quot;The shape of the raw ontario covid and vaccince data is {ontariocovid_vaccine_raw_df.shape}&quot;) . The size of the raw ontario covid and vaccince data is 11340 The shape of the raw ontario covid and vaccince data is (540, 21) . Observation: . Column names are lengthy and can be simplified | The date column is of the wrong data type | Raw data contains some columns that are not needed for this analysis | . Data cleaning . ontariocovid_vaccine_raw_df.drop(columns=[&#39;province&#39;,&#39;last_updated&#39;], axis=1, inplace=True, errors=&#39;raise&#39;) # reviewing data to see result without dropped columns ontariocovid_vaccine_raw_df.head(3) . data » date data » change_cases data » change_fatalities data » change_tests data » change_hospitalizations data » change_criticals data » change_recoveries data » change_vaccinations data » change_vaccinated data » change_vaccines_distributed data » total_cases data » total_fatalities data » total_tests data » total_hospitalizations data » total_criticals data » total_recoveries data » total_vaccinations data » total_vaccinated data » total_vaccines_distributed . 0 2020-01-25 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 2020-01-26 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2 2020-01-27 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . ontariocovid_vaccine_cl_df = ontariocovid_vaccine_raw_df.rename(columns={&#39;data » date&#39;:&#39;date&#39;,&#39;data » change_cases&#39;: &#39;change_cases&#39;,&#39;data » change_fatalities&#39;:&#39;change_fatalities&#39;,&#39;data » change_tests&#39;:&#39;change_tests&#39;,&#39;data » change_hospitalizations&#39;:&#39;change_hospitalizations&#39;,&#39;data » change_criticals&#39;:&#39;change_criticals&#39;,&#39;data » change_recoveries&#39;:&#39;change_recoveries&#39;,&#39;data » change_vaccinations&#39;:&#39;change_vaccinations&#39;,&#39;data » change_vaccinated&#39;:&#39;change_vaccinated&#39;,&#39;data » change_vaccines_distributed&#39;:&#39;change_vaccines_distributed&#39;,&#39;data » total_cases&#39;:&#39;total_cases&#39;,&#39;data » total_fatalities&#39;:&#39;total_fatalities&#39;,&#39;data » total_tests&#39;:&#39;total_tests&#39;,&#39;data » total_hospitalizations&#39;:&#39;total_hospitalizations&#39;,&#39;data » total_criticals&#39;:&#39;total_criticals&#39;,&#39;data » total_recoveries&#39;:&#39;total_recoveries&#39;,&#39;data » total_vaccinations&#39;:&#39;total_vaccinations&#39;,&#39;data » total_vaccinated&#39;:&#39;total_vaccinated&#39;,&#39;data » total_vaccines_distributed&#39;:&#39;total_vaccines_distibuted&#39;}) # reviewing table with renamed columns ontariocovid_vaccine_cl_df.head(2) . date change_cases change_fatalities change_tests change_hospitalizations change_criticals change_recoveries change_vaccinations change_vaccinated change_vaccines_distributed total_cases total_fatalities total_tests total_hospitalizations total_criticals total_recoveries total_vaccinations total_vaccinated total_vaccines_distibuted . 0 2020-01-25 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 2020-01-26 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . print(f&quot;shape: {ontariocovid_vaccine_cl_df.shape}&quot;) print(f&quot;size: {ontariocovid_vaccine_cl_df.size}&quot;) . shape: (540, 19) size: 10260 . ontariocovid_vaccine_cl_df.dtypes . date object change_cases int64 change_fatalities int64 change_tests int64 change_hospitalizations int64 change_criticals int64 change_recoveries int64 change_vaccinations int64 change_vaccinated int64 change_vaccines_distributed int64 total_cases int64 total_fatalities int64 total_tests int64 total_hospitalizations int64 total_criticals int64 total_recoveries int64 total_vaccinations int64 total_vaccinated int64 total_vaccines_distibuted int64 dtype: object . ontariocovid_vaccine_cl_df[&#39;date&#39;] = pd.to_datetime(ontariocovid_vaccine_cl_df[&#39;date&#39;]) # alternative method: OntarioDS[&#39;Date&#39;].astype(&#39;datetime64&#39;) ontariocovid_vaccine_cl_df.tail(2) . date change_cases change_fatalities change_tests change_hospitalizations change_criticals change_recoveries change_vaccinations change_vaccinated change_vaccines_distributed total_cases total_fatalities total_tests total_hospitalizations total_criticals total_recoveries total_vaccinations total_vaccinated total_vaccines_distibuted . 538 2021-07-16 | 159 | 10 | 28126 | -6 | -10 | 189 | 168616 | 148190 | 0 | 547864 | 9285 | 16310438 | 159 | 158 | 537176 | 17810472 | 7578116 | 21247191 | . 539 2021-07-17 | 176 | 3 | 0 | -16 | -9 | 203 | 169103 | 148713 | 0 | 548040 | 9288 | 16310438 | 143 | 149 | 537379 | 17979575 | 7726829 | 21247191 | . ontariocovid_vaccine_cl_df.dtypes . date datetime64[ns] change_cases int64 change_fatalities int64 change_tests int64 change_hospitalizations int64 change_criticals int64 change_recoveries int64 change_vaccinations int64 change_vaccinated int64 change_vaccines_distributed int64 total_cases int64 total_fatalities int64 total_tests int64 total_hospitalizations int64 total_criticals int64 total_recoveries int64 total_vaccinations int64 total_vaccinated int64 total_vaccines_distibuted int64 dtype: object . Missing values . ontariocovid_vaccine_cl_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 540 entries, 0 to 539 Data columns (total 19 columns): # Column Non-Null Count Dtype -- -- 0 date 540 non-null datetime64[ns] 1 change_cases 540 non-null int64 2 change_fatalities 540 non-null int64 3 change_tests 540 non-null int64 4 change_hospitalizations 540 non-null int64 5 change_criticals 540 non-null int64 6 change_recoveries 540 non-null int64 7 change_vaccinations 540 non-null int64 8 change_vaccinated 540 non-null int64 9 change_vaccines_distributed 540 non-null int64 10 total_cases 540 non-null int64 11 total_fatalities 540 non-null int64 12 total_tests 540 non-null int64 13 total_hospitalizations 540 non-null int64 14 total_criticals 540 non-null int64 15 total_recoveries 540 non-null int64 16 total_vaccinations 540 non-null int64 17 total_vaccinated 540 non-null int64 18 total_vaccines_distibuted 540 non-null int64 dtypes: datetime64[ns](1), int64(18) memory usage: 80.3 KB . # data was double-checked by calculating the percentage of blanks and filled values for each column precent_na_in_cols(ontariocovid_vaccine_cl_df) . date - 0.0% change_cases - 0.0% change_fatalities - 0.0% change_tests - 0.0% change_hospitalizations - 0.0% change_criticals - 0.0% change_recoveries - 0.0% change_vaccinations - 0.0% change_vaccinated - 0.0% change_vaccines_distributed - 0.0% total_cases - 0.0% total_fatalities - 0.0% total_tests - 0.0% total_hospitalizations - 0.0% total_criticals - 0.0% total_recoveries - 0.0% total_vaccinations - 0.0% total_vaccinated - 0.0% total_vaccines_distibuted - 0.0% . missingno.matrix(ontariocovid_vaccine_cl_df,fontsize=16,figsize=(25,5),color=(0.29,0.5908,0.21)) #width and height in inches plt.show() . Conclusion: The data has no missing values so no further transformations are required . Checking for Outliers . ontariocovid_vaccine_cl_df.describe() . change_cases change_fatalities change_tests change_hospitalizations change_criticals change_recoveries change_vaccinations change_vaccinated change_vaccines_distributed total_cases total_fatalities total_tests total_hospitalizations total_criticals total_recoveries total_vaccinations total_vaccinated total_vaccines_distibuted . count 540.000000 | 540.000000 | 540.000000 | 540.000000 | 540.000000 | 540.000000 | 540.000000 | 540.000000 | 5.400000e+02 | 540.000000 | 540.000000 | 5.400000e+02 | 540.000000 | 540.000000 | 540.000000 | 5.400000e+02 | 5.400000e+02 | 5.400000e+02 | . mean 1014.888889 | 17.200000 | 30204.514815 | 0.264815 | 0.275926 | 995.146296 | 33295.509259 | 14308.942593 | 3.934665e+04 | 173438.322222 | 4102.418519 | 6.210089e+06 | 607.118519 | 233.716667 | 159704.788889 | 1.891873e+06 | 4.053989e+05 | 2.228826e+06 | . std 1121.017676 | 18.354194 | 19587.605552 | 57.839762 | 11.191029 | 1097.000888 | 62197.435746 | 44979.114900 | 1.846978e+05 | 187762.934298 | 2938.819561 | 5.565973e+06 | 569.154860 | 224.955084 | 179204.821849 | 4.092870e+06 | 1.257577e+06 | 4.784855e+06 | . min 0.000000 | -1.000000 | -725.000000 | -366.000000 | -34.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000e+00 | 1.000000 | 0.000000 | 0.000000e+00 | 0.000000 | 0.000000 | 0.000000 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | . 25% 164.750000 | 3.000000 | 16302.500000 | -14.000000 | -4.000000 | 162.250000 | 0.000000 | 0.000000 | 0.000000e+00 | 30799.250000 | 2444.000000 | 8.630498e+05 | 106.500000 | 45.750000 | 24432.000000 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | . 50% 488.000000 | 12.000000 | 28713.500000 | 0.000000 | 0.000000 | 501.500000 | 0.000000 | 0.000000 | 0.000000e+00 | 66291.000000 | 3057.500000 | 4.730649e+06 | 520.500000 | 191.000000 | 56965.500000 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | . 75% 1588.000000 | 25.000000 | 44742.000000 | 15.000000 | 3.000000 | 1536.500000 | 28096.500000 | 1929.500000 | 0.000000e+00 | 305069.500000 | 7029.500000 | 1.124538e+07 | 919.500000 | 335.000000 | 287713.750000 | 7.937995e+05 | 2.683542e+05 | 1.086745e+06 | . max 4812.000000 | 100.000000 | 76472.000000 | 405.000000 | 167.000000 | 4698.000000 | 268884.000000 | 244701.000000 | 2.106190e+06 | 548040.000000 | 9288.000000 | 1.631044e+07 | 2360.000000 | 900.000000 | 537379.000000 | 1.797958e+07 | 7.726829e+06 | 2.124719e+07 | . fig_2 = plt.figure(figsize=(16,9)) gridspec.GridSpec(2,3) plt.subplot2grid((2,3),(0,0)) # using a box plot to get a clearer view on possible ouliers # plt.figure(figsize=(5,5)) sns.boxplot(y=&#39;change_cases&#39;, data=ontariocovid_vaccine_cl_df, color=&#39;red&#39;) plt.title(&quot;Covid cases distribution analysis&quot;) plt.annotate(&quot;limit&quot;,(.21,10**3.54)) plt.yscale(&#39;log&#39;) plt.ylabel(&quot;cases and tests scale&quot;) plt.subplot2grid((2,3),(0,1)) sns.boxplot(y=&#39;change_tests&#39;, data=ontariocovid_vaccine_cl_df, color=&#39;blue&#39;) plt.title(&quot;Covid tests distribution analysis&quot;) plt.annotate(&quot;limit&quot;,(.21,10**4.875)) plt.yscale(&#39;log&#39;) plt.ylabel(&quot;cases and tests scale&quot;) plt.show() . fig_1 = plt.figure(figsize=(16,9)) gridspec.GridSpec(2,3) plt.subplot2grid((2,2),(0,0)) # plt.figure(figsize=(5,5)) ontariocovid_vaccine_cl_df[&#39;change_cases&#39;].plot() plt.annotate(&quot;cases peak&quot;,(449,4812)) plt.legend() plt.subplot2grid((2,2),(0,1)) # plt.figure(figsize=(5,5)) ontariocovid_vaccine_cl_df[&#39;change_tests&#39;].plot() plt.annotate(&quot;test peak&quot;,(358,76472),xycoords =&#39;data&#39;) # plt.annotate(&quot;test peak&quot;,(370,76472),xycoords =&#39;data&#39; ,arrowprops=dict(arrowstyle=&quot;-&gt;&quot;,color=&#39;black&#39;, shrink=0.0001, headwidth = 0.01,width=0.1)) plt.legend() plt.show() . Conclusion: . The data description indicates that there are significant deviations from the mean and the box plot shows that there are possible outliers in the dataset | Using a line plot, it can be observed that there was a lot of fluctuation in activities throughout the period. | To further validate that the numbers are not a result of data error, with the information captured on CTV news and Ontario&#39;s covid tracker, where the dataset was extracted from, the fluctuation in the events hold true. | No further transformation required | . Duplicated data . dup_quick_search(ontariocovid_vaccine_cl_df) . There are no duplicates . non_num_dup_search(ontariocovid_vaccine_cl_df) . Columns without numeric data: date. There are no duplicate columns in this data . Conclusion: . While there&#39;s a non-numeric column - Date, it contains no duplicated data, so no further transformation required | . Setting new index - time series . ontariocovid_vaccine_ts_df = ontariocovid_vaccine_cl_df.set_index(&#39;date&#39;).tz_localize(&quot;Canada/Eastern&quot;) ontariocovid_vaccine_ts_df.index.names =[None] # removing index column name ontariocovid_vaccine_ts_df.head(2) . change_cases change_fatalities change_tests change_hospitalizations change_criticals change_recoveries change_vaccinations change_vaccinated change_vaccines_distributed total_cases total_fatalities total_tests total_hospitalizations total_criticals total_recoveries total_vaccinations total_vaccinated total_vaccines_distibuted . 2020-01-25 00:00:00-05:00 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2020-01-26 00:00:00-05:00 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . ontariocovid_vaccine_ts_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; DatetimeIndex: 540 entries, 2020-01-25 00:00:00-05:00 to 2021-07-17 00:00:00-04:00 Data columns (total 18 columns): # Column Non-Null Count Dtype -- -- 0 change_cases 540 non-null int64 1 change_fatalities 540 non-null int64 2 change_tests 540 non-null int64 3 change_hospitalizations 540 non-null int64 4 change_criticals 540 non-null int64 5 change_recoveries 540 non-null int64 6 change_vaccinations 540 non-null int64 7 change_vaccinated 540 non-null int64 8 change_vaccines_distributed 540 non-null int64 9 total_cases 540 non-null int64 10 total_fatalities 540 non-null int64 11 total_tests 540 non-null int64 12 total_hospitalizations 540 non-null int64 13 total_criticals 540 non-null int64 14 total_recoveries 540 non-null int64 15 total_vaccinations 540 non-null int64 16 total_vaccinated 540 non-null int64 17 total_vaccines_distibuted 540 non-null int64 dtypes: int64(18) memory usage: 80.2 KB . print(f&#39;The Shape of the time series version of the data frame is: t{ontariocovid_vaccine_ts_df.shape}&#39;) print(f&#39;The Size of the time series version of the data frame is: t{ontariocovid_vaccine_ts_df.size}&#39;) . The Shape of the time series version of the data frame is: (540, 18) The Size of the time series version of the data frame is: 9720 . ontariocovid_vaccine_ts_df.to_pickle(&#39;data/ontario-covid/ontario_df.pickle&#39;) . Conclusion: . Ontario covid and vaccine time series data has been cleaned, converted to timeseries with Canada/Eastern timezone and is ready for processsing. | . PROFILING TEST . # profile = ProfileReport(ontariocovid_vaccine_ts_df, title=&quot;Ontario_Covid_Vaccine&quot;, html={&#39;style&#39;: {&#39;full_width&#39;: True}}, sort=None) # profile.to_widgets() . . # profile . B. Ontario confirmed positive cases with age groups . Data types . confirmed_cases_city_raw_df = pd.read_csv(&#39;data/ontario-covid/confirmed_positive_cases_of_COVID19_in_Ontario.csv&#39;) confirmed_cases_city_raw_df.sort_values(by=&#39;Case_Reported_Date&#39;, inplace=True) confirmed_cases_city_raw_df.head(2) . _id Row_ID Accurate_Episode_Date Case_Reported_Date Test_Reported_Date Specimen_Date Age_Group Client_Gender Case_AcquisitionInfo Outcome1 Outbreak_Related Reporting_PHU_ID Reporting_PHU Reporting_PHU_Address Reporting_PHU_City Reporting_PHU_Postal_Code Reporting_PHU_Website Reporting_PHU_Latitude Reporting_PHU_Longitude . 10 11 | 11 | 2020-01-21T00:00:00 | 2020-01-23T00:00:00 | 2020-01-26T00:00:00 | 2020-01-23T00:00:00 | 50s | MALE | TRAVEL | Resolved | NaN | 3895 | Toronto Public Health | 277 Victoria Street, 5th Floor | Toronto | M5B 1W2 | www.toronto.ca/community-people/health-wellnes... | 43.656591 | -79.379358 | . 11 12 | 12 | 2020-01-22T00:00:00 | 2020-01-23T00:00:00 | 2020-01-27T00:00:00 | 2020-01-25T00:00:00 | 50s | FEMALE | TRAVEL | Resolved | NaN | 3895 | Toronto Public Health | 277 Victoria Street, 5th Floor | Toronto | M5B 1W2 | www.toronto.ca/community-people/health-wellnes... | 43.656591 | -79.379358 | . confirmed_cases_city_raw_df.columns . Index([&#39;_id&#39;, &#39;Row_ID&#39;, &#39;Accurate_Episode_Date&#39;, &#39;Case_Reported_Date&#39;, &#39;Test_Reported_Date&#39;, &#39;Specimen_Date&#39;, &#39;Age_Group&#39;, &#39;Client_Gender&#39;, &#39;Case_AcquisitionInfo&#39;, &#39;Outcome1&#39;, &#39;Outbreak_Related&#39;, &#39;Reporting_PHU_ID&#39;, &#39;Reporting_PHU&#39;, &#39;Reporting_PHU_Address&#39;, &#39;Reporting_PHU_City&#39;, &#39;Reporting_PHU_Postal_Code&#39;, &#39;Reporting_PHU_Website&#39;, &#39;Reporting_PHU_Latitude&#39;, &#39;Reporting_PHU_Longitude&#39;], dtype=&#39;object&#39;) . confirmed_cases_city_raw_df.dtypes . _id int64 Row_ID int64 Accurate_Episode_Date object Case_Reported_Date object Test_Reported_Date object Specimen_Date object Age_Group object Client_Gender object Case_AcquisitionInfo object Outcome1 object Outbreak_Related object Reporting_PHU_ID int64 Reporting_PHU object Reporting_PHU_Address object Reporting_PHU_City object Reporting_PHU_Postal_Code object Reporting_PHU_Website object Reporting_PHU_Latitude float64 Reporting_PHU_Longitude float64 dtype: object . print(f&quot;The size of the raw confirmed cases with age groups data is {confirmed_cases_city_raw_df.size}&quot;) print(f&quot;The shape of the raw confirmed cases with age groups data is {confirmed_cases_city_raw_df.shape}&quot;) . The size of the raw confirmed cases with age groups data is 10525278 The shape of the raw confirmed cases with age groups data is (553962, 19) . Observations: . Data contains multiple columns that seem to be indices | Data is captured from multiple cities and need to be grouped by the date, age_groups and gender to make it a cummulative Ontario data for this analysis. | Column names are capitalized and can be made lower case for consistency (not mandatory) | Some columns are of the wrong data type | Raw data contains some columns that are not needed for this analysis | Records need to be adjusted to match target eda end date July 17 | . Data cleaning . # fiirst - copy the city raw df for modification ont_confirmed_cases_raw_df = confirmed_cases_city_raw_df.copy() . ont_confirmed_cases_raw_df[&#39;case_count&#39;] =1 ont_confirmed_cases_raw_df.tail(2) . _id Row_ID Accurate_Episode_Date Case_Reported_Date Test_Reported_Date Specimen_Date Age_Group Client_Gender Case_AcquisitionInfo Outcome1 Outbreak_Related Reporting_PHU_ID Reporting_PHU Reporting_PHU_Address Reporting_PHU_City Reporting_PHU_Postal_Code Reporting_PHU_Website Reporting_PHU_Latitude Reporting_PHU_Longitude case_count . 553730 553731 | 553731 | 2021-08-09T00:00:00 | 2021-08-11T00:00:00 | 2021-08-11T00:00:00 | 2021-08-09T00:00:00 | 20s | MALE | OB | Not Resolved | Yes | 2270 | York Region Public Health Services | 17250 Yonge Street | Newmarket | L3Y 6Z1 | www.york.ca/wps/portal/yorkhome/health/ | 44.048023 | -79.480239 | 1 | . 553961 553962 | 553962 | 2021-08-11T00:00:00 | 2021-08-11T00:00:00 | 2021-08-11T00:00:00 | 2021-08-11T00:00:00 | &lt;20 | MALE | MISSING INFORMATION | Not Resolved | NaN | 2270 | York Region Public Health Services | 17250 Yonge Street | Newmarket | L3Y 6Z1 | www.york.ca/wps/portal/yorkhome/health/ | 44.048023 | -79.480239 | 1 | . ont_confirmed_cases_raw_df.duplicated().any() . False . ont_confirmed_cases_raw_df.isnull().any() . _id False Row_ID False Accurate_Episode_Date False Case_Reported_Date False Test_Reported_Date True Specimen_Date True Age_Group False Client_Gender False Case_AcquisitionInfo False Outcome1 False Outbreak_Related True Reporting_PHU_ID False Reporting_PHU False Reporting_PHU_Address False Reporting_PHU_City False Reporting_PHU_Postal_Code False Reporting_PHU_Website False Reporting_PHU_Latitude False Reporting_PHU_Longitude False case_count False dtype: bool . for cols in ont_confirmed_cases_raw_df.columns: missingvaluecheck = ont_confirmed_cases_raw_df[cols].isnull().mean() print(f&quot;{cols} - {missingvaluecheck :.1%}&quot;) . _id - 0.0% Row_ID - 0.0% Accurate_Episode_Date - 0.0% Case_Reported_Date - 0.0% Test_Reported_Date - 2.3% Specimen_Date - 0.4% Age_Group - 0.0% Client_Gender - 0.0% Case_AcquisitionInfo - 0.0% Outcome1 - 0.0% Outbreak_Related - 82.8% Reporting_PHU_ID - 0.0% Reporting_PHU - 0.0% Reporting_PHU_Address - 0.0% Reporting_PHU_City - 0.0% Reporting_PHU_Postal_Code - 0.0% Reporting_PHU_Website - 0.0% Reporting_PHU_Latitude - 0.0% Reporting_PHU_Longitude - 0.0% case_count - 0.0% . Observations: . There are no duplicated records in the confirmed positive cases for the cities in Ontario. | However, some columns have missing values. Since these columns are not used in the analysis and don&#39;t hold crucial data, grouping process would continue without further transformation | . # defining the columns I need and resetting the index ont_confirmed_cases_raw_df = ont_confirmed_cases_raw_df.groupby([&#39;Case_Reported_Date&#39;,&#39;Age_Group&#39;,&#39;Client_Gender&#39;])[[&#39;case_count&#39;]].agg(sum).reset_index() ont_confirmed_cases_raw_df .head() . Case_Reported_Date Age_Group Client_Gender case_count . 0 2020-01-23T00:00:00 | 50s | FEMALE | 1 | . 1 2020-01-23T00:00:00 | 50s | MALE | 1 | . 2 2020-01-24T00:00:00 | 20s | FEMALE | 1 | . 3 2020-02-21T00:00:00 | 20s | FEMALE | 1 | . 4 2020-02-25T00:00:00 | 60s | FEMALE | 1 | . ont_confirmed_cases_raw_df.columns =[ &#39;date&#39;,&#39;age_group&#39;,&#39;gender&#39;,&#39;case_count&#39;] ont_confirmed_cases_raw_df.head(2) . date age_group gender case_count . 0 2020-01-23T00:00:00 | 50s | FEMALE | 1 | . 1 2020-01-23T00:00:00 | 50s | MALE | 1 | . # first: copy ontario confirmed cases into a new variable for editing confirmed_cases_cl_df = ont_confirmed_cases_raw_df.copy() confirmed_cases_cl_df.dtypes . date object age_group object gender object case_count int64 dtype: object . confirmed_cases_cl_df[&#39;age_group&#39;] . 0 50s 1 50s 2 20s 3 20s 4 60s ... 10510 80s 10511 &lt;20 10512 &lt;20 10513 &lt;20 10514 UNKNOWN Name: age_group, Length: 10515, dtype: object . confirmed_cases_cl_1_df = confirmed_cases_cl_df[~confirmed_cases_cl_df[&#39;age_group&#39;].isin([&#39;UNKNOWN&#39;])] . confirmed_cases_cl_1_df[&#39;age_group&#39;] . 0 50s 1 50s 2 20s 3 20s 4 60s ... 10509 80s 10510 80s 10511 &lt;20 10512 &lt;20 10513 &lt;20 Name: age_group, Length: 10425, dtype: object . percent_of_retained_confirmed_cases = (len(confirmed_cases_cl_1_df[&#39;age_group&#39;])/len(confirmed_cases_cl_df[&#39;age_group&#39;])) print(f&quot;The percentage of age data retained is: {percent_of_retained_confirmed_cases:.2%}&quot;) . The percentage of age data retained is: 99.14% . confirmed_cases_cl_1_df[&#39;age_group&#39;] = confirmed_cases_cl_1_df[&#39;age_group&#39;].astype(&#39;category&#39;) confirmed_cases_cl_1_df[&#39;gender&#39;] = confirmed_cases_cl_1_df[&#39;gender&#39;].astype(&#39;category&#39;) confirmed_cases_cl_1_df[&#39;date&#39;] = pd.to_datetime(confirmed_cases_cl_1_df[&#39;date&#39;]) . confirmed_cases_cl_1_df.dtypes . date datetime64[ns] age_group category gender category case_count int64 dtype: object . confirmed_cases_cl_2_df = confirmed_cases_cl_1_df[(confirmed_cases_cl_1_df[&#39;date&#39;]&gt;=&#39;2020-01-23&#39;) &amp; (confirmed_cases_cl_1_df[&#39;date&#39;]&lt;=&#39;2021-07-17&#39;)] confirmed_cases_cl_2_df.tail(2) . date age_group gender case_count . 10045 2021-07-17 | &lt;20 | FEMALE | 24 | . 10046 2021-07-17 | &lt;20 | MALE | 26 | . print(confirmed_cases_cl_2_df.size) print(confirmed_cases_cl_2_df.shape) . 39836 (9959, 4) . Missing values . precent_na_in_cols(confirmed_cases_cl_2_df) . date - 0.0% age_group - 0.0% gender - 0.0% case_count - 0.0% . confirmed_cases_cl_2_df.isna().any() . date False age_group False gender False case_count False dtype: bool . confirmed_cases_cl_2_df[&#39;age_group&#39;] . 0 50s 1 50s 2 20s 3 20s 4 60s ... 10042 60s 10043 70s 10044 70s 10045 &lt;20 10046 &lt;20 Name: age_group, Length: 9959, dtype: category Categories (9, object): [&#39;20s&#39;, &#39;30s&#39;, &#39;40s&#39;, &#39;50s&#39;, ..., &#39;70s&#39;, &#39;80s&#39;, &#39;90+&#39;, &#39;&lt;20&#39;] . Conclusion: . There is no missing data in the data set | . Checking for outliers . confirmed_cases_cl_2_df.describe() . case_count . count 9959.000000 | . mean 55.043077 | . std 80.184154 | . min 1.000000 | . 25% 5.000000 | . 50% 19.000000 | . 75% 72.000000 | . max 559.000000 | . plt.figure(figsize=(5,5)) sns.boxplot(y=&#39;case_count&#39;, data=confirmed_cases_cl_2_df, color=&#39;green&#39;) plt.yscale(&#39;log&#39;) plt.title(&quot;Confirmed cases distribution analysis&quot;) plt.annotate(&quot;maximum value&quot;,(.21,10**2.21)) plt.annotate(&quot;minimum value&quot;,(.21,10**0)) plt.ylabel(&quot;cases scale&quot;) plt.show() . plt.figure(figsize=(5,5)) confirmed_cases_cl_2_df[&#39;case_count&#39;].plot() x = confirmed_cases_cl_2_df[(confirmed_cases_cl_2_df[&#39;case_count&#39;]==confirmed_cases_cl_2_df[&#39;case_count&#39;].max())].index[0] plt.annotate(&quot;559 cases&quot;,(x,confirmed_cases_cl_2_df[&#39;case_count&#39;].max())) plt.legend() . &lt;matplotlib.legend.Legend at 0x11f8a8310&gt; . confirmed_cases_cl_2_df[&#39;case_count&#39;].max() . 559 . Conclusion: . The data description indicates that theres substantial deviation from the mean and the box plot shows that there are possible outliers in the dataset | Using a line plot, it can be observed that there was a lot of fluctuation in activities throughout the period and difference is likely due to that. | No further transformation required | . Duplicated data . dup_quick_search(confirmed_cases_cl_2_df) . There are no duplicates . Conclusion: . There are no duplicates in the data | . Setting new index - time series . # localizing the time to canadian timezone confirmed_cases_ts_df = confirmed_cases_cl_2_df.set_index(&#39;date&#39;, drop=True).tz_localize(&#39;Canada/Eastern&#39;) confirmed_cases_ts_df.index.names=[None] confirmed_cases_ts_df.tail(3) . age_group gender case_count . 2021-07-17 00:00:00-04:00 70s | MALE | 3 | . 2021-07-17 00:00:00-04:00 &lt;20 | FEMALE | 24 | . 2021-07-17 00:00:00-04:00 &lt;20 | MALE | 26 | . print(f&quot;confirmed cases final data shape: {confirmed_cases_ts_df.shape}&quot;) print(f&quot;confirmed cases final data size: {confirmed_cases_ts_df.size}&quot;) . confirmed cases final data shape: (9959, 3) confirmed cases final data size: 29877 . confirmed_cases_ts_df.to_pickle(&#39;data/ontario-covid/confirmed_positive.pickle&#39;) . # profile_b = ProfileReport(confirmed_cases_city_raw_df, title=&quot;Confirmed_cases_by_age_Public_Health_data&quot;, html={&#39;style&#39;: {&#39;full_width&#39;: True}}, sort=None) # profile_b.to_widgets() . Conclusion . The percentage of age data retained is: 99.14% | The Confirmed cases data has been cleaned, converted to timeseries with Canada/Eastern timezone and is ready for processsing. | . C. Vaccine data with age groups . Data types . vacc_data_raw_df = pd.read_csv(&#39;data/ontario-covid/ontario_vaccination_data_by_age.csv&#39;) vacc_data_raw_df.head(2) . _id Date Agegroup At least one dose_cumulative Second_dose_cumulative Total population Percent_at_least_one_dose Percent_fully_vaccinated . 0 1 | 2020-12-16T00:00:00 | 12-17yrs | 0 | 0 | 951519 | 0.0 | 0.0 | . 1 2 | 2020-12-16T00:00:00 | 18-29yrs | 45 | 0 | 2455535 | 0.0 | 0.0 | . vacc_data_raw_df.columns . Index([&#39;_id&#39;, &#39;Date&#39;, &#39;Agegroup&#39;, &#39;At least one dose_cumulative&#39;, &#39;Second_dose_cumulative&#39;, &#39;Total population&#39;, &#39;Percent_at_least_one_dose&#39;, &#39;Percent_fully_vaccinated&#39;], dtype=&#39;object&#39;) . vacc_data_raw_df.dtypes . _id int64 Date object Agegroup object At least one dose_cumulative int64 Second_dose_cumulative int64 Total population int64 Percent_at_least_one_dose float64 Percent_fully_vaccinated float64 dtype: object . print(f&quot;The size of the raw vaccination with age groups data is {vacc_data_raw_df.size}&quot;) print(f&quot;The shape of the raw vaccination with age groups data is {vacc_data_raw_df.shape}&quot;) . The size of the raw vaccination with age groups data is 21120 The shape of the raw vaccination with age groups data is (2640, 8) . Observation: . Data contains multiple columns that seem to be indices | Column names are capitalized and can be made lower case (not mandatory) | Some columns are of the wrong data type | Raw data contains some columns that are not needed for this analysis | Records need to be adjusted to match target eda end date July 17 | The age column contains an &#39;Undisclosed_or_missing&#39; category and it doesn&#39;t seem to be actual age category as there&#39;s no recorded population number for those people | The age column contains &#39;Adults_18plus&#39; and &#39;Ontario_12plus&#39; which are just cummulatives of the age ranges in these categories | . Data Cleaning . vacc_data_cl_df = vacc_data_raw_df.set_index(&#39;_id&#39;, drop=True) vacc_data_cl_df.index.names =[None] vacc_data_cl_df.head(2) . Date Agegroup At least one dose_cumulative Second_dose_cumulative Total population Percent_at_least_one_dose Percent_fully_vaccinated . 1 2020-12-16T00:00:00 | 12-17yrs | 0 | 0 | 951519 | 0.0 | 0.0 | . 2 2020-12-16T00:00:00 | 18-29yrs | 45 | 0 | 2455535 | 0.0 | 0.0 | . vacc_data_cl_df.columns = [&#39;date&#39;, &#39;age_group&#39;, &#39;partially_vaccinated&#39;, &#39;fully_vaccinated&#39;, &#39;total_population&#39;, &#39;%_partially_vaccinated&#39;, &#39;%_fully_vaccinated&#39;] vacc_data_cl_df.head(2) . date age_group partially_vaccinated fully_vaccinated total_population %_partially_vaccinated %_fully_vaccinated . 1 2020-12-16T00:00:00 | 12-17yrs | 0 | 0 | 951519 | 0.0 | 0.0 | . 2 2020-12-16T00:00:00 | 18-29yrs | 45 | 0 | 2455535 | 0.0 | 0.0 | . # vacc_data_cl_df.dtypes vacc_data_cl_df[&#39;date&#39;] = pd.to_datetime(vacc_data_cl_df[&#39;date&#39;]) vacc_data_cl_df[&#39;age_group&#39;] = vacc_data_cl_df[&#39;age_group&#39;].astype(&#39;category&#39;) vacc_data_cl_df.dtypes . date datetime64[ns] age_group category partially_vaccinated int64 fully_vaccinated int64 total_population int64 %_partially_vaccinated float64 %_fully_vaccinated float64 dtype: object . vacc_data_cl_df.duplicated().any() . False . vacc_data_cl_df.isna().any() . date False age_group False partially_vaccinated False fully_vaccinated False total_population False %_partially_vaccinated True %_fully_vaccinated True dtype: bool . vacc_data_cl_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 2640 entries, 1 to 2640 Data columns (total 7 columns): # Column Non-Null Count Dtype -- -- 0 date 2640 non-null datetime64[ns] 1 age_group 2640 non-null category 2 partially_vaccinated 2640 non-null int64 3 fully_vaccinated 2640 non-null int64 4 total_population 2640 non-null int64 5 %_partially_vaccinated 2400 non-null float64 6 %_fully_vaccinated 2400 non-null float64 dtypes: category(1), datetime64[ns](1), float64(2), int64(3) memory usage: 147.3 KB . vacc_data_cl_df[vacc_data_cl_df[&#39;%_partially_vaccinated&#39;].isna()==True] . date age_group partially_vaccinated fully_vaccinated total_population %_partially_vaccinated %_fully_vaccinated . 11 2020-12-16 | Undisclosed_or_missing | 0 | 0 | 0 | NaN | NaN | . 22 2020-12-17 | Undisclosed_or_missing | 0 | 0 | 0 | NaN | NaN | . 33 2020-12-18 | Undisclosed_or_missing | 0 | 0 | 0 | NaN | NaN | . 44 2020-12-19 | Undisclosed_or_missing | 0 | 0 | 0 | NaN | NaN | . 55 2020-12-20 | Undisclosed_or_missing | 0 | 0 | 0 | NaN | NaN | . ... ... | ... | ... | ... | ... | ... | ... | . 2596 2021-08-08 | Undisclosed_or_missing | 4004 | 3016 | 0 | NaN | NaN | . 2607 2021-08-09 | Undisclosed_or_missing | 4003 | 3017 | 0 | NaN | NaN | . 2618 2021-08-10 | Undisclosed_or_missing | 3996 | 3021 | 0 | NaN | NaN | . 2629 2021-08-11 | Undisclosed_or_missing | 3991 | 3024 | 0 | NaN | NaN | . 2640 2021-08-12 | Undisclosed_or_missing | 3993 | 3030 | 0 | NaN | NaN | . 240 rows × 7 columns . Observations . There are 240 rows with missing data as the age groups of these vaccinated indiviuals were not provided and under the group &#39;undisclosed_or_missing&#39;. | hence, there is not population percentage for them. | . vacc_data_cl_2_df = vacc_data_cl_df.copy() vacc_data_cl_2_df.dropna(inplace=True) . vacc_data_cl_2_df.isna().any() . date False age_group False partially_vaccinated False fully_vaccinated False total_population False %_partially_vaccinated False %_fully_vaccinated False dtype: bool . vacc_data_cl_3_df = vacc_data_cl_2_df[~vacc_data_cl_2_df[&#39;age_group&#39;].isin([&quot;Adults_18plus&quot;,&quot;Ontario_12plus&quot;])] vacc_data_cl_3_df.head(3) . date age_group partially_vaccinated fully_vaccinated total_population %_partially_vaccinated %_fully_vaccinated . 1 2020-12-16 | 12-17yrs | 0 | 0 | 951519 | 0.0 | 0.0 | . 2 2020-12-16 | 18-29yrs | 45 | 0 | 2455535 | 0.0 | 0.0 | . 3 2020-12-16 | 30-39yrs | 66 | 0 | 2056059 | 0.0 | 0.0 | . vacc_data_cl_3_df = vacc_data_cl_3_df[vacc_data_cl_3_df[&#39;date&#39;]&lt;=&#39;2021-07-17&#39;].reset_index(drop=True) vacc_data_cl_3_df.tail(2) . date age_group partially_vaccinated fully_vaccinated total_population %_partially_vaccinated %_fully_vaccinated . 1710 2021-07-17 | 70-79yrs | 1088303 | 970174 | 1159902 | 0.9383 | 0.8364 | . 1711 2021-07-17 | 80+ | 655021 | 603328 | 679266 | 0.9643 | 0.8882 | . Missing values . precent_na_in_cols(vacc_data_cl_3_df) . date - 0.0% age_group - 0.0% partially_vaccinated - 0.0% fully_vaccinated - 0.0% total_population - 0.0% %_partially_vaccinated - 0.0% %_fully_vaccinated - 0.0% . conclusion . There are no columns with missing data, hence all have 0.0% missing data result. . | No further transformation required . | . Checking for outliers . vacc_data_cl_3_df.describe() . partially_vaccinated fully_vaccinated total_population %_partially_vaccinated %_fully_vaccinated . count 1.712000e+03 | 1.712000e+03 | 1.712000e+03 | 1712.000000 | 1712.000000 | . mean 4.695228e+05 | 1.280318e+05 | 1.629356e+06 | 0.311037 | 0.089047 | . std 5.511343e+05 | 2.518500e+05 | 5.834802e+05 | 0.351952 | 0.175876 | . min 0.000000e+00 | 0.000000e+00 | 6.792660e+05 | 0.000000 | 0.000000 | . 25% 2.851250e+04 | 2.041000e+03 | 1.107806e+06 | 0.017000 | 0.001000 | . 50% 1.554245e+05 | 3.751500e+04 | 1.835814e+06 | 0.093000 | 0.020000 | . 75% 9.037892e+05 | 8.580425e+04 | 2.057278e+06 | 0.670325 | 0.062250 | . max 1.693587e+06 | 1.361905e+06 | 2.455535e+06 | 0.964300 | 0.888200 | . plt.figure(figsize=(5,5)) vacc_data_cl_3_df[&#39;partially_vaccinated&#39;].plot() vacc_data_cl_3_df[&#39;fully_vaccinated&#39;].plot() plt.show() . Conclusion . Trend shows consistent progression and so values considered outliers are likely not. | No transformation done | . Duplicated data . dup_quick_search(vacc_data_cl_3_df) . There are no duplicates . Conclusion . No duplicates found and no further transformation has been carried out | . Setting new index - time series . vacc_data_ts_df = vacc_data_cl_3_df.set_index(&#39;date&#39;, drop=True).tz_localize(&#39;Canada/Eastern&#39;) . vacc_data_ts_df.head(2) . age_group partially_vaccinated fully_vaccinated total_population %_partially_vaccinated %_fully_vaccinated . date . 2020-12-16 00:00:00-05:00 12-17yrs | 0 | 0 | 951519 | 0.0 | 0.0 | . 2020-12-16 00:00:00-05:00 18-29yrs | 45 | 0 | 2455535 | 0.0 | 0.0 | . vacc_data_ts_df.to_pickle(&#39;data/ontario-covid/vaccine_data.pickle&#39;) . # profile_c = ProfileReport(vacc_data_ts_df, title=&quot;Vaccination_by_age_Public_Health_data&quot;, html={&#39;style&#39;: {&#39;full_width&#39;: True}}, sort=None) # profile_c.to_widgets() . Conclusion . The vaccination with age data has been cleaned, converted to timeseries with Canada/Eastern timezone and is ready for processsing. | . D. Google Covid-19 community mobility report for Ontario . Data types . mobility_2020_raw_df =pd.read_csv(&#39;data/ontario-covid/2020_ca_region_mobility_report.csv&#39;) mobility_2020_raw_df.head(3) . country_region_code country_region sub_region_1 sub_region_2 metro_area iso_3166_2_code census_fips_code place_id date retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 0 CA | Canada | NaN | NaN | NaN | NaN | NaN | ChIJ2WrMN9MDDUsRpY9Doiq3aJk | 2020-02-15 | 4.0 | 2.0 | 10.0 | 3.0 | 1.0 | 0.0 | . 1 CA | Canada | NaN | NaN | NaN | NaN | NaN | ChIJ2WrMN9MDDUsRpY9Doiq3aJk | 2020-02-16 | 13.0 | 8.0 | 41.0 | 4.0 | 0.0 | -2.0 | . 2 CA | Canada | NaN | NaN | NaN | NaN | NaN | ChIJ2WrMN9MDDUsRpY9Doiq3aJk | 2020-02-17 | -12.0 | -15.0 | 63.0 | -28.0 | -52.0 | 11.0 | . mobility_2020_raw_df.columns . Index([&#39;country_region_code&#39;, &#39;country_region&#39;, &#39;sub_region_1&#39;, &#39;sub_region_2&#39;, &#39;metro_area&#39;, &#39;iso_3166_2_code&#39;, &#39;census_fips_code&#39;, &#39;place_id&#39;, &#39;date&#39;, &#39;retail_and_recreation_percent_change_from_baseline&#39;, &#39;grocery_and_pharmacy_percent_change_from_baseline&#39;, &#39;parks_percent_change_from_baseline&#39;, &#39;transit_stations_percent_change_from_baseline&#39;, &#39;workplaces_percent_change_from_baseline&#39;, &#39;residential_percent_change_from_baseline&#39;], dtype=&#39;object&#39;) . mobility_2020_raw_df.dtypes . country_region_code object country_region object sub_region_1 object sub_region_2 object metro_area float64 iso_3166_2_code object census_fips_code float64 place_id object date object retail_and_recreation_percent_change_from_baseline float64 grocery_and_pharmacy_percent_change_from_baseline float64 parks_percent_change_from_baseline float64 transit_stations_percent_change_from_baseline float64 workplaces_percent_change_from_baseline float64 residential_percent_change_from_baseline float64 dtype: object . print(f&quot;The size of the raw 2020 mobility data is {mobility_2020_raw_df.size}&quot;) print(f&quot;The shape of the raw 2020 mobility data is {mobility_2020_raw_df.shape}&quot;) . The size of the raw 2020 mobility data is 1159950 The shape of the raw 2020 mobility data is (77330, 15) . mobility_2021_raw_df =pd.read_csv(&#39;data/ontario-covid/2021_ca_region_mobility_report.csv&#39;) mobility_2021_raw_df.tail(2) . country_region_code country_region sub_region_1 sub_region_2 metro_area iso_3166_2_code census_fips_code place_id date retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 57207 CA | Canada | Yukon | NaN | NaN | CA-YT | NaN | ChIJiYtStJiBF1ER6pbMYdWcFC4 | 2021-08-07 | -18.0 | NaN | NaN | NaN | NaN | NaN | . 57208 CA | Canada | Yukon | NaN | NaN | CA-YT | NaN | ChIJiYtStJiBF1ER6pbMYdWcFC4 | 2021-08-08 | -11.0 | NaN | NaN | NaN | NaN | NaN | . mobility_2021_raw_df.columns . Index([&#39;country_region_code&#39;, &#39;country_region&#39;, &#39;sub_region_1&#39;, &#39;sub_region_2&#39;, &#39;metro_area&#39;, &#39;iso_3166_2_code&#39;, &#39;census_fips_code&#39;, &#39;place_id&#39;, &#39;date&#39;, &#39;retail_and_recreation_percent_change_from_baseline&#39;, &#39;grocery_and_pharmacy_percent_change_from_baseline&#39;, &#39;parks_percent_change_from_baseline&#39;, &#39;transit_stations_percent_change_from_baseline&#39;, &#39;workplaces_percent_change_from_baseline&#39;, &#39;residential_percent_change_from_baseline&#39;], dtype=&#39;object&#39;) . mobility_2021_raw_df.dtypes . country_region_code object country_region object sub_region_1 object sub_region_2 object metro_area float64 iso_3166_2_code object census_fips_code float64 place_id object date object retail_and_recreation_percent_change_from_baseline float64 grocery_and_pharmacy_percent_change_from_baseline float64 parks_percent_change_from_baseline float64 transit_stations_percent_change_from_baseline float64 workplaces_percent_change_from_baseline float64 residential_percent_change_from_baseline float64 dtype: object . print(f&quot;The size of the raw 2021 mobility data is {mobility_2021_raw_df.size}&quot;) print(f&quot;The shape of the raw 2021 mobility data is {mobility_2021_raw_df.shape}&quot;) . The size of the raw 2021 mobility data is 858135 The shape of the raw 2021 mobility data is (57209, 15) . Observation: . mobility data started being captured in February while covid was first detected in January in the province | Data contains multiple regions but only would be used in this analysis | Some columns are of the wrong data type | Raw data contains some columns that are not needed for this analysis | Records need to be adjusted to match target eda end date July 17 | . Data cleaning . cleaning 2020 . mobility_2020_cl_df = mobility_2020_raw_df.copy() . mobility_2020_cl_df = mobility_2020_cl_df[mobility_2020_raw_df[&#39;sub_region_1&#39;]==&#39;Ontario&#39;] mobility_2020_cl_df.head(3) . country_region_code country_region sub_region_1 sub_region_2 metro_area iso_3166_2_code census_fips_code place_id date retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 29748 CA | Canada | Ontario | NaN | NaN | CA-ON | NaN | ChIJrxNRX7IFzkwRCR5iKVZC-HA | 2020-02-15 | 2.0 | 3.0 | 20.0 | 5.0 | 1.0 | -1.0 | . 29749 CA | Canada | Ontario | NaN | NaN | CA-ON | NaN | ChIJrxNRX7IFzkwRCR5iKVZC-HA | 2020-02-16 | 16.0 | 13.0 | 44.0 | 5.0 | -2.0 | -2.0 | . 29750 CA | Canada | Ontario | NaN | NaN | CA-ON | NaN | ChIJrxNRX7IFzkwRCR5iKVZC-HA | 2020-02-17 | -26.0 | -37.0 | 70.0 | -40.0 | -72.0 | 16.0 | . mobility_2020_cl_1_df = mobility_2020_cl_df.copy() . mobility_2020_cl_1_df = mobility_2020_cl_df[[&#39;date&#39;,&#39;sub_region_1&#39;,&#39;retail_and_recreation_percent_change_from_baseline&#39;, &#39;grocery_and_pharmacy_percent_change_from_baseline&#39;, &#39;parks_percent_change_from_baseline&#39;,&#39;transit_stations_percent_change_from_baseline&#39;, &#39;workplaces_percent_change_from_baseline&#39;, &#39;residential_percent_change_from_baseline&#39;]] mobility_2020_cl_1_df.head(2) . date sub_region_1 retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 29748 2020-02-15 | Ontario | 2.0 | 3.0 | 20.0 | 5.0 | 1.0 | -1.0 | . 29749 2020-02-16 | Ontario | 16.0 | 13.0 | 44.0 | 5.0 | -2.0 | -2.0 | . mobility_2020_cl_1_df.dtypes . date object sub_region_1 object retail_and_recreation_percent_change_from_baseline float64 grocery_and_pharmacy_percent_change_from_baseline float64 parks_percent_change_from_baseline float64 transit_stations_percent_change_from_baseline float64 workplaces_percent_change_from_baseline float64 residential_percent_change_from_baseline float64 dtype: object . mobility_2020_cl_1_df[&#39;date&#39;] = mobility_2020_cl_1_df[&#39;date&#39;].astype(&#39;datetime64&#39;) . mobility_2020_cl_1_df.dtypes . date datetime64[ns] sub_region_1 object retail_and_recreation_percent_change_from_baseline float64 grocery_and_pharmacy_percent_change_from_baseline float64 parks_percent_change_from_baseline float64 transit_stations_percent_change_from_baseline float64 workplaces_percent_change_from_baseline float64 residential_percent_change_from_baseline float64 dtype: object . mobility_2020_cl_1_df.shape . (15844, 8) . cleaning 2021 . mobility_2021_cl_df = mobility_2021_raw_df[mobility_2021_raw_df[&#39;sub_region_1&#39;]==&#39;Ontario&#39;] mobility_2021_cl_df.tail(3) . country_region_code country_region sub_region_1 sub_region_2 metro_area iso_3166_2_code census_fips_code place_id date retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 33406 CA | Canada | Ontario | Wellington County | NaN | NaN | NaN | ChIJuTjl8B_BK4gRI_6Rd2EM7lk | 2021-08-06 | -15.0 | -3.0 | 171.0 | -25.0 | -39.0 | 7.0 | . 33407 CA | Canada | Ontario | Wellington County | NaN | NaN | NaN | ChIJuTjl8B_BK4gRI_6Rd2EM7lk | 2021-08-07 | -11.0 | 4.0 | 232.0 | 17.0 | -14.0 | 0.0 | . 33408 CA | Canada | Ontario | Wellington County | NaN | NaN | NaN | ChIJuTjl8B_BK4gRI_6Rd2EM7lk | 2021-08-08 | -5.0 | -1.0 | 287.0 | 13.0 | -13.0 | -2.0 | . mobility_2021_cl_1_df = mobility_2021_cl_df[[&#39;date&#39;,&#39;sub_region_1&#39;,&#39;retail_and_recreation_percent_change_from_baseline&#39;, &#39;grocery_and_pharmacy_percent_change_from_baseline&#39;, &#39;parks_percent_change_from_baseline&#39;,&#39;transit_stations_percent_change_from_baseline&#39;, &#39;workplaces_percent_change_from_baseline&#39;, &#39;residential_percent_change_from_baseline&#39;]] mobility_2021_cl_1_df.head(2) . date sub_region_1 retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 22220 2021-01-01 | Ontario | -79.0 | -74.0 | -1.0 | -83.0 | -85.0 | 33.0 | . 22221 2021-01-02 | Ontario | -51.0 | -20.0 | 17.0 | -60.0 | -30.0 | 14.0 | . mobility_2021_cl_1_df.shape . (11189, 8) . mobility_2021_cl_1_df.dtypes . date object sub_region_1 object retail_and_recreation_percent_change_from_baseline float64 grocery_and_pharmacy_percent_change_from_baseline float64 parks_percent_change_from_baseline float64 transit_stations_percent_change_from_baseline float64 workplaces_percent_change_from_baseline float64 residential_percent_change_from_baseline float64 dtype: object . mobility_2021_cl_1_df[&#39;date&#39;] = pd.to_datetime(mobility_2021_cl_1_df[&#39;date&#39;]) . mobility_2021_cl_1_df.head(2) . date sub_region_1 retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 22220 2021-01-01 | Ontario | -79.0 | -74.0 | -1.0 | -83.0 | -85.0 | 33.0 | . 22221 2021-01-02 | Ontario | -51.0 | -20.0 | 17.0 | -60.0 | -30.0 | 14.0 | . mobility_2021_cl_1_df.dtypes . date datetime64[ns] sub_region_1 object retail_and_recreation_percent_change_from_baseline float64 grocery_and_pharmacy_percent_change_from_baseline float64 parks_percent_change_from_baseline float64 transit_stations_percent_change_from_baseline float64 workplaces_percent_change_from_baseline float64 residential_percent_change_from_baseline float64 dtype: object . Missing values . precent_na_in_cols(mobility_2020_cl_1_df) . date - 0.0% sub_region_1 - 0.0% retail_and_recreation_percent_change_from_baseline - 12.5% grocery_and_pharmacy_percent_change_from_baseline - 13.4% parks_percent_change_from_baseline - 60.5% transit_stations_percent_change_from_baseline - 41.8% workplaces_percent_change_from_baseline - 2.0% residential_percent_change_from_baseline - 18.8% . There are multiple columns with missing data. . | Let&#39;s dig deeper into the location and other content of these records with missing information . | . mobility_2020_cl_1_df[(mobility_2020_cl_1_df[&#39;retail_and_recreation_percent_change_from_baseline&#39;].isna()==True)| (mobility_2020_cl_1_df[&#39;grocery_and_pharmacy_percent_change_from_baseline&#39;].isna()==True) | (mobility_2020_cl_1_df[&#39;parks_percent_change_from_baseline&#39;].isna()==True) | (mobility_2020_cl_1_df[&#39;transit_stations_percent_change_from_baseline&#39;].isna()==True) | (mobility_2020_cl_1_df[&#39;workplaces_percent_change_from_baseline&#39;].isna()==True) | (mobility_2020_cl_1_df[&#39;residential_percent_change_from_baseline&#39;].isna()==True) ] . date sub_region_1 retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 30070 2020-02-16 | Ontario | 5.0 | -1.0 | NaN | -3.0 | -5.0 | 0.0 | . 30071 2020-02-17 | Ontario | -51.0 | -66.0 | NaN | -28.0 | -66.0 | 12.0 | . 30076 2020-02-22 | Ontario | 5.0 | 5.0 | NaN | 14.0 | 4.0 | -2.0 | . 30077 2020-02-23 | Ontario | 10.0 | -7.0 | NaN | -1.0 | 3.0 | -1.0 | . 30078 2020-02-24 | Ontario | 7.0 | -1.0 | NaN | -6.0 | 2.0 | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 45475 2020-09-06 | Ontario | -1.0 | 0.0 | NaN | NaN | -15.0 | -3.0 | . 45476 2020-09-07 | Ontario | -51.0 | -53.0 | NaN | -30.0 | -81.0 | 20.0 | . 45477 2020-09-08 | Ontario | -9.0 | 8.0 | NaN | -29.0 | -36.0 | 10.0 | . 45478 2020-09-09 | Ontario | -10.0 | 3.0 | NaN | -33.0 | -35.0 | 9.0 | . 45479 2020-09-10 | Ontario | -13.0 | 0.0 | NaN | -30.0 | -32.0 | 10.0 | . 10298 rows × 8 columns . mobility_2020_cl_1_df[&#39;date&#39;].duplicated().any() . True . mobility_2020_cl_1_df[mobility_2020_cl_1_df[&#39;date&#39;]==&#39;2020-02-16&#39;].head(5) . date sub_region_1 retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 29749 2020-02-16 | Ontario | 16.0 | 13.0 | 44.0 | 5.0 | -2.0 | -2.0 | . 30070 2020-02-16 | Ontario | 5.0 | -1.0 | NaN | -3.0 | -5.0 | 0.0 | . 30391 2020-02-16 | Ontario | 20.0 | NaN | NaN | NaN | NaN | NaN | . 30706 2020-02-16 | Ontario | 10.0 | 11.0 | NaN | NaN | -3.0 | -3.0 | . 31027 2020-02-16 | Ontario | 23.0 | 23.0 | NaN | NaN | 1.0 | NaN | . # then, use average for dates for further processing mobility_2020_cl_1_df.fillna(0, inplace=True) . precent_na_in_cols(mobility_2020_cl_1_df) . date - 0.0% sub_region_1 - 0.0% retail_and_recreation_percent_change_from_baseline - 0.0% grocery_and_pharmacy_percent_change_from_baseline - 0.0% parks_percent_change_from_baseline - 0.0% transit_stations_percent_change_from_baseline - 0.0% workplaces_percent_change_from_baseline - 0.0% residential_percent_change_from_baseline - 0.0% . The 2020 mobility data no longer has missing values . dup_quick_search(mobility_2020_cl_1_df) . There are some duplicates . len(mobility_2020_cl_1_df[mobility_2020_cl_1_df.duplicated()==True]) . 218 . # since unsure of data, group by date and take averages for duplicated dates mobility_2020_grp_df = mobility_2020_cl_1_df.groupby(&#39;date&#39;)[mobility_2020_cl_1_df.columns].mean().reset_index() mobility_2020_grp_df.head(2) . date retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 0 2020-02-15 | 6.234043 | 4.340426 | 12.851064 | 14.744681 | 1.638298 | -0.617021 | . 1 2020-02-16 | 15.234043 | 14.085106 | 19.680851 | 4.085106 | -1.468085 | -1.212766 | . mobility_2020_grp_df.duplicated().any() . False . checking for missing values in 2021 . precent_na_in_cols(mobility_2021_cl_1_df) . date - 0.0% sub_region_1 - 0.0% retail_and_recreation_percent_change_from_baseline - 11.2% grocery_and_pharmacy_percent_change_from_baseline - 11.4% parks_percent_change_from_baseline - 60.5% transit_stations_percent_change_from_baseline - 41.0% workplaces_percent_change_from_baseline - 0.0% residential_percent_change_from_baseline - 13.7% . mobility_2021_cl_1_df[&#39;date&#39;].duplicated().any() . True . # then, use average for dates for further processing mobility_2021_cl_1_df.fillna(0, inplace=True) . precent_na_in_cols(mobility_2021_cl_1_df) . date - 0.0% sub_region_1 - 0.0% retail_and_recreation_percent_change_from_baseline - 0.0% grocery_and_pharmacy_percent_change_from_baseline - 0.0% parks_percent_change_from_baseline - 0.0% transit_stations_percent_change_from_baseline - 0.0% workplaces_percent_change_from_baseline - 0.0% residential_percent_change_from_baseline - 0.0% . The 2021 mobility data no longer has missing values . dup_quick_search(mobility_2021_cl_1_df) . There are some duplicates . len(mobility_2021_cl_1_df[mobility_2021_cl_1_df.duplicated()==True]) . 79 . # since unsure of data, group by date and take averages for duplicated dates mobility_2021_grp_df = mobility_2021_cl_1_df.groupby(&#39;date&#39;)[mobility_2021_cl_1_df.columns].mean().reset_index() mobility_2021_grp_df.head(2) . date retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 0 2021-01-01 | -70.615385 | -65.307692 | 1.596154 | -43.634615 | -81.961538 | 27.365385 | . 1 2021-01-02 | -40.660000 | -12.820000 | 12.560000 | -31.260000 | -26.180000 | 9.100000 | . mobility_2021_grp_df.duplicated().any() . False . Checking for outliers . 2020 . mobility_2020_grp_df.describe() . retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . count 321.000000 | 321.000000 | 321.000000 | 321.000000 | 321.000000 | 321.000000 | . mean -12.464695 | 1.002950 | 15.322276 | -18.468664 | -25.626151 | 7.588006 | . std 17.160772 | 13.182951 | 20.388848 | 10.458751 | 18.923134 | 5.184913 | . min -75.634615 | -70.288462 | -21.901961 | -42.846154 | -82.961538 | -1.666667 | . 25% -18.980000 | -2.760000 | 0.000000 | -24.461538 | -35.961538 | 4.020833 | . 50% -7.461538 | 2.961538 | 10.600000 | -19.355556 | -26.500000 | 7.434783 | . 75% -2.230769 | 7.634615 | 28.596154 | -13.466667 | -8.595745 | 9.961538 | . max 15.382979 | 46.057692 | 80.384615 | 14.744681 | 8.520833 | 23.442308 | . plt.figure(figsize=(14,13)) mobility_2020_grp_df[&#39;retail_and_recreation_percent_change_from_baseline&#39;].plot() mobility_2020_grp_df[&#39;grocery_and_pharmacy_percent_change_from_baseline&#39;].plot() mobility_2020_grp_df[&#39;parks_percent_change_from_baseline&#39;].plot() mobility_2020_grp_df[&#39;transit_stations_percent_change_from_baseline&#39;].plot() mobility_2020_grp_df[&#39;workplaces_percent_change_from_baseline&#39;].plot() mobility_2020_grp_df[&#39;residential_percent_change_from_baseline&#39;].plot() plt.legend(loc=&#39;upper right&#39;) plt.show() . . 2021 . mobility_2021_grp_df.describe() . retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . count 220.000000 | 220.000000 | 220.000000 | 220.000000 | 220.000000 | 220.000000 | . mean -13.945846 | 3.849563 | 19.379391 | -23.544463 | -26.463807 | 8.742197 | . std 19.253995 | 15.199105 | 22.519439 | 8.620087 | 12.263124 | 4.684521 | . min -70.615385 | -65.307692 | -18.134615 | -43.634615 | -81.961538 | -2.170213 | . 25% -28.641827 | -5.841346 | -0.163462 | -29.078689 | -32.572115 | 5.691106 | . 50% -14.757212 | 2.086538 | 18.679331 | -24.868863 | -27.355769 | 9.078846 | . 75% 2.048478 | 16.633413 | 33.682692 | -19.455230 | -20.924532 | 12.110577 | . max 27.680851 | 47.038462 | 80.000000 | 9.000000 | -1.893617 | 27.365385 | . plt.figure(figsize=(14,13)) mobility_2021_grp_df[&#39;retail_and_recreation_percent_change_from_baseline&#39;].plot() mobility_2021_grp_df[&#39;grocery_and_pharmacy_percent_change_from_baseline&#39;].plot() mobility_2021_grp_df[&#39;parks_percent_change_from_baseline&#39;].plot() mobility_2021_grp_df[&#39;transit_stations_percent_change_from_baseline&#39;].plot() mobility_2021_grp_df[&#39;workplaces_percent_change_from_baseline&#39;].plot() mobility_2021_grp_df[&#39;residential_percent_change_from_baseline&#39;].plot() plt.legend(loc=&#39;upper left&#39;) plt.show() . . A number of peaks can be obesrved in the data, however, considering the public health restrictions during the pandemic and the human consciuosness, the likelihood of having short periods of peaks with eased restrictions is increased. Data would be retained in current state for analysis. . Duplicated data . dup_quick_search(mobility_2020_grp_df) . There are no duplicates . len(mobility_2020_grp_df) . 321 . mobility_2020_grp_df[&#39;date&#39;].unique . &lt;bound method Series.unique of 0 2020-02-15 1 2020-02-16 2 2020-02-17 3 2020-02-18 4 2020-02-19 ... 316 2020-12-27 317 2020-12-28 318 2020-12-29 319 2020-12-30 320 2020-12-31 Name: date, Length: 321, dtype: datetime64[ns]&gt; . dup_quick_search(mobility_2021_grp_df) . There are no duplicates . len(mobility_2020_grp_df) . 321 . mobility_2021_grp_df[&#39;date&#39;].unique . &lt;bound method Series.unique of 0 2021-01-01 1 2021-01-02 2 2021-01-03 3 2021-01-04 4 2021-01-05 ... 215 2021-08-04 216 2021-08-05 217 2021-08-06 218 2021-08-07 219 2021-08-08 Name: date, Length: 220, dtype: datetime64[ns]&gt; . No duplicates found . mobility_2021_grp_sl_df = mobility_2021_grp_df[mobility_2021_grp_df[&#39;date&#39;]&lt;=&#39;2021-07-17&#39;] mobility_2021_grp_sl_df.tail(3) . date retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 195 2021-07-15 | 10.211538 | 21.903846 | 28.538462 | -15.634615 | -27.788462 | 6.673077 | . 196 2021-07-16 | 8.000000 | 15.961538 | 30.076923 | -14.615385 | -27.288462 | 5.692308 | . 197 2021-07-17 | 11.645833 | 20.875000 | 41.958333 | -1.958333 | -5.166667 | 0.166667 | . Setting new index - time series . mobility_2020_ts_df = mobility_2020_grp_df.set_index(&#39;date&#39;, drop=True).tz_localize(&#39;Canada/Eastern&#39;) mobility_2020_ts_df.index.names=[None] mobility_2020_ts_df.head(1) . retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 2020-02-15 00:00:00-05:00 6.234043 | 4.340426 | 12.851064 | 14.744681 | 1.638298 | -0.617021 | . print(f&quot;Size of mobility ts data 2020: {mobility_2020_ts_df.size} &quot;) print(f&quot;Shape of mobility ts data 2020: {mobility_2020_ts_df.shape} &quot;) print(len(mobility_2020_ts_df)) . Size of mobility ts data 2020: 1926 Shape of mobility ts data 2020: (321, 6) 321 . mobility_2021_ts_df = mobility_2021_grp_sl_df.set_index(&#39;date&#39;, drop=True).tz_localize(&#39;Canada/Eastern&#39;) mobility_2021_ts_df.index.names =[None] mobility_2021_ts_df.head(1) . retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 2021-01-01 00:00:00-05:00 -70.615385 | -65.307692 | 1.596154 | -43.634615 | -81.961538 | 27.365385 | . print(f&quot;The size of mobility_ts data 2020: {mobility_2021_ts_df.size} &quot;) print(f&quot;The shape of mobility_ts data 2021: {mobility_2021_ts_df.shape} &quot;) . The size of mobility_ts data 2020: 1188 The shape of mobility_ts data 2021: (198, 6) . mobility_ts_df = mobility_2020_ts_df.append(mobility_2021_ts_df) mobility_ts_df.index.tz_convert(&#39;Canada/Eastern&#39;) mobility_ts_df.head(2) . retail_and_recreation_percent_change_from_baseline grocery_and_pharmacy_percent_change_from_baseline parks_percent_change_from_baseline transit_stations_percent_change_from_baseline workplaces_percent_change_from_baseline residential_percent_change_from_baseline . 2020-02-15 00:00:00-05:00 6.234043 | 4.340426 | 12.851064 | 14.744681 | 1.638298 | -0.617021 | . 2020-02-16 00:00:00-05:00 15.234043 | 14.085106 | 19.680851 | 4.085106 | -1.468085 | -1.212766 | . print(f&quot;The size of mobility_ts data 2020: {mobility_ts_df.size} &quot;) print(f&quot;The shape of mobility_ts data 2021: {mobility_ts_df.shape} &quot;) . The size of mobility_ts data 2020: 3114 The shape of mobility_ts data 2021: (519, 6) . mobility_ts_df.to_pickle(&#39;data/ontario-covid/mobility.pickle&#39;) . # profile_d = ProfileReport(mobility_ts_df, title=&quot;Google Mobility Data for Ontario&quot;, html={&#39;style&#39;: {&#39;full_width&#39;: True}}, sort=None) # profile_d.to_widgets() . Conclusion . It is important to note that almost all the columns selected for this analysis had null values, however, on further investigation, it was observed that there was a large number of duplicated rows in the data and most were part of the records with NA values. | To minimize data loss, the na values were filled with 0, the data was grouped by dates and an average percent mobility value was computed for duplicated records. | A number of peaks can be obesrved in the data, however, considering the public health restrictions during the pandemic and the human consciuosness, the likelihood of having short periods of peaks with eased restrictions is increased. Data would be retained in current state for analysis. | The points above apply to data for 2020 and 2021. | The mobility data for 2020 and 2021 has now been cleaned, combined into a new df, converted to timeseries with Canada/Eastern timezone and is ready for processsing. | .",
            "url": "https://enobongudoh.github.io/data-science-projects/covid-19/ontario/canada/2021/09/08/eu-ontario-data-preparation.html",
            "relUrl": "/covid-19/ontario/canada/2021/09/08/eu-ontario-data-preparation.html",
            "date": " • Sep 8, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://enobongudoh.github.io/data-science-projects/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://enobongudoh.github.io/data-science-projects/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". My name is Enobong Nkpoikana Udoh. I am an MBA graduate from the university of Aberdeen, Scotland with a Bachelor of Science degree in Management Information Systems. . My interest in improving processes and decision quality from learnings, using technology, led me to the interesting path that is data science. I am excited about the opportunity to transform raw data into meaningful insights that can support informed decision making. I’m also a skilled communicator, an excellent project coordination with an eye for detail and a creative problem-solver who delivers value on team and individual projects. . Outside of data science, I enjoy watching tv shows, catching up with loved ones, exercising and travelling. . “Success is not final, failure is not fatal: It is the courage to continue that counts.” —Winston Churchill .",
          "url": "https://enobongudoh.github.io/data-science-projects/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://enobongudoh.github.io/data-science-projects/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}